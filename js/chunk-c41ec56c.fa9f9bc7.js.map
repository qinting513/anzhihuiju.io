{"version":3,"sources":["webpack:///./node_modules/echarts/map/js/china.js","webpack:///./src/components/heat-map.vue?43f5","webpack:///./src/components/heat-map.vue?93b8","webpack:///src/components/heat-map.vue","webpack:///./src/components/heat-map.vue?5e7b","webpack:///./src/components/heat-map.vue"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","exports","__webpack_require__","apply","undefined","module","this","echarts","log","msg","console","error","registerMap","type","features","id","geometry","coordinates","encodeOffsets","properties","cp","name","childNum","UTF8Encoding","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_heat_map_vue_vue_type_style_index_0_id_294875f9_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_heat_map_vue_vue_type_style_index_0_id_294875f9_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","n","render","_vm","_h","$createElement","_c","_self","staticClass","ref","attrs","staticRenderFns","STOREDATA","TOOLTIPS","YEARLIST","heat_mapvue_type_script_lang_js_","data","showTooltips","nowYear","nowProvince","nowVal","toolTipsLeft","toolTipsTop","created","mounted","_this2","$nextTick","drawMap","$emit","methods","returnChartNode","$refs","mapchart","isIE","window","ActiveXObject","getProvinceData","year","_this3","areaAddress","forEach","province","proVal","val","city","isNaN","Number","value","push","getCurrentProvinceData","getCityData","cityVal","ValueArray","LNGB","LATB","getImportantCityData","pollutant","importantCity","Icity","index","getAreaData","areaIndex","areaList","area","queryCityList","hotCity","ZCgetProvinceData","_this4","dataKey","cityData","currentZCgetProvinceData","ZCCityData","ZCgetImportantCityData","ZCgetAreaData","returnMaxVal","tab","arr","obj","Math","max","_data","_arr","toolsMaxVal","currentListMax","_this","myChart","init","document","getElementById","chartData","heatYear","defaultData","policy","toolbox","show","showTitle","orient","right","top","feature","saveAsImage","defaultOption","visualMap","itemWidth","bottom","left","min","calculable","inRange","color","textStyle","tooltip","trigger","position","formatter","params","text","geo","map","roam","label","normal","itemStyle","areaColor","borderColor","emphasis","shadowOffsetX","shadowOffsetY","shadowBlur","borderWidth","series","coordinateSystem","confine","mapType","setOption","setTimeout","onresize","resize","screen","computed","Object","objectSpread","vuex_esm","PM2d5","CO","NO2","PM10","SO2","O3","watch","handler","newValue","oldValue","option","deep","components_heat_mapvue_type_script_lang_js_","component","componentNormalizer","options","__file","__webpack_exports__"],"mappings":"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","file":"js/chunk-c41ec56c.fa9f9bc7.js","sourcesContent":["/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports', 'echarts'], factory);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        factory(exports, require('echarts'));\n    } else {\n        // Browser globals\n        factory({}, root.echarts);\n    }\n}(this, function (exports, echarts) {\n    var log = function (msg) {\n        if (typeof console !== 'undefined') {\n            console && console.error && console.error(msg);\n        }\n    }\n    if (!echarts) {\n        log('ECharts is not Loaded');\n        return;\n    }\n    if (!echarts.registerMap) {\n        log('ECharts Map is not loaded')\n        return;\n    }\n    echarts.registerMap('china', {\"type\":\"FeatureCollection\",\"features\":[{\"id\":\"710000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@°Ü¯Û\"],[\"@@ƛĴÕƊÉɼģºðʀ\\\\ƎsÆNŌÔĚänÜƤɊĂǀĆĴĤǊŨxĚĮǂƺòƌâÔ®ĮXŦţƸZûÐƕƑGđ¨ĭMó·ęcëƝɉlÝƯֹÅŃ^Ó·śŃǋƏďíåɛGɉ¿@ăƑ¥ĘWǬÏĶŁâ\"],[\"@@\\\\p|WoYG¿¥Ij@¢\"],[\"@@¡@V^RqBbAnTXeRz¤L«³I\"],[\"@@ÆEEkWqë @\"],[\"@@fced\"]],\"encodeOffsets\":[[[122886,24033]],[[123335,22980]],[[122375,24193]],[[122518,24117]],[[124427,22618]],[[124862,26043]]]},\"properties\":{\"cp\":[121.509062,25.044332],\"name\":\"台湾\",\"childNum\":6}},{\"id\":\"130000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@o~Z]ªrºc_ħ²G¼s`jÎŸnüsÂłNX_M`Ç½ÓnUKĜēs¤­©yrý§uģcJe\"],[\"@@U`Ts¿mÂ\"],[\"@@oºƋÄdeVDJj£J|ÅdzÂFt~KŨ¸IÆv|¢r}èonb}`RÎÄn°ÒdÞ²^®lnÐèĄlðÓ×]ªÆ}LiĂ±Ö`^°Ç¶p®đDcŋ`ZÔ¶êqvFÆN®ĆTH®¦O¾IbÐã´BĐɢŴÆíȦpĐÞXR·nndO¤OÀĈƒ­QgµFo|gȒęSWb©osx|hYhgŃfmÖĩnºTÌSp¢dYĤ¶UĈjlǐpäìë|³kÛfw²Xjz~ÂqbTÑěŨ@|oMzv¢ZrÃVw¬ŧĖ¸f°ÐTªqs{S¯r æÝlNd®²Ğ ǆiGĘJ¼lr}~K¨ŸƐÌWöÆzR¤lêmĞLÎ@¡|q]SvKÑcwpÏÏĿćènĪWlĄkT}J¤~ÈTdpddʾĬBVtEÀ¢ôPĎƗè@~kü\\\\rÊĔÖæW_§¼F´©òDòjYÈrbĞāøŀG{ƀ|¦ðrb|ÀH`pʞkvGpuARhÞÆǶgĘTǼƹS£¨¡ù³ŘÍ]¿ÂyôEP xX¶¹ÜO¡gÚ¡IwÃé¦ÅBÏ|Ç°N«úmH¯âDùyŜŲIÄuĐ¨D¸dɂFOhđ©OiÃ`ww^ÌkÑH«ƇǤŗĺtFu{Z}Ö@U´ʚLg®¯Oı°Ãw ^VbÉsmAê]]w§RRl£ȭµu¯b{ÍDěïÿȧuT£ġěŗƃĝQ¨fVƋƅn­a@³@ďyÃ½IĹÊKŭfċŰóxV@tƯJ]eR¾fe|rHA|h~Ėƍl§ÏlTíb ØoÅbbx³^zÃĶ¶Sj®AyÂhðk`«PËµEFÛ¬Y¨Ļrõqi¼Wi°§Ð±´°^[À|ĠO@ÆxO\\\\ta\\\\tĕtû{ġȧXýĪÓjùÎRb^ÎfK[ÝděYfíÙTyuUSyŌŏů@Oi½éŅ­aVcř§ax¹XŻácWU£ôãºQ¨÷Ñws¥qEHÙ|šYQoŕÇyáĂ£MÃ°oťÊP¡mWO¡v{ôvîēÜISpÌhp¨ jdeŔQÖjX³àĈ[n`Yp@UcM`RKhEbpŞlNut®EtqnsÁgAiúoHqCXhfgu~ÏWP½¢G^}¯ÅīGCÑ^ãziMáļMTÃƘrMc|O_¯Ŏ´|morDkO\\\\mĆJfl@cĢ¬¢aĦtRıÒ¾ùƀ^juųœK­UFyƝīÛ÷ąV×qƥV¿aȉd³BqPBmaËđŻģmÅ®V¹d^KKonYg¯XhqaLdu¥Ípǅ¡KąÅkĝęěhq}HyÃ]¹ǧ£Í÷¿qáµ§g¤o^á¾ZE¤i`ĳ{nOl»WÝĔįhgF[¿¡ßkOüš_ūiǱàUtėGyl}ÓM}jpEC~¡FtoQiHkk{Ãmï\"]],\"encodeOffsets\":[[[119712,40641]],[[121616,39981]],[[116462,37237]]]},\"properties\":{\"cp\":[114.502461,38.045474],\"name\":\"河北\",\"childNum\":3}},{\"id\":\"140000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ÞĩÒSra}ÁyWix±Üe´lèßÓǏokćiµVZģ¡coTSË¹ĪmnÕńehZg{gtwªpXaĚThȑp{¶Eh®RćƑP¿£Pmc¸mQÝWďȥoÅîɡųAďä³aÏJ½¥PG­ąSM­EÅruµéYÓŌ_dĒCo­Èµ]¯_²ÕjāK~©ÅØ^ÔkïçămÏk]­±cÝ¯ÑÃmQÍ~_apm~ç¡qu{JÅŧ·Ls}EyÁÆcI{¤IiCfUcƌÃp§]ě«vD@¡SÀµMÅwuYY¡DbÑc¡h×]nkoQdaMç~eDÛtT©±@¥ù@É¡ZcW|WqOJmĩl«ħşvOÓ«IqăV¥D[mI~Ó¢cehiÍ]Ɠ~ĥqX·eƷn±}v[ěďŕ]_œ`¹§ÕōIo©b­s^}Ét±ū«³p£ÿ·Wµ|¡¥ăFÏs×¥ŅxÊdÒ{ºvĴÎêÌɊ²¶ü¨|ÞƸµȲLLúÉƎ¤ϊęĔV`_bªS^|dzY|dz¥pZbÆ£¶ÒK}tĦÔņƠPYznÍvX¶Ěn ĠÔzý¦ª÷ÑĸÙUȌ¸dòÜJð´ìúNM¬XZ´¤ŊǸ_tldI{¦ƀðĠȤ¥NehXnYGR° ƬDj¬¸|CĞKqºfƐiĺ©ª~ĆOQª ¤@ìǦɌ²æBÊTŸʂōĖĴŞȀÆÿȄlŤĒötÎ½î¼ĨXh|ªM¤Ðz\"],\"encodeOffsets\":[[116874,41716]]},\"properties\":{\"cp\":[112.549248,37.857014],\"name\":\"山西\",\"childNum\":1}},{\"id\":\"150000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@Č^â£ĂhĖMÈÄw\\\\fŦ°W ¢¾luŸDw\\\\̀ʉÌÛMĀ[bÓEn}¶Vcês¯PqFB|S³C|kñHdiÄ¥sŉÅPóÑÑE^ÅPpy_YtShQ·aHwsOnŉÃs©iqjUSiº]ïW«gW¡ARëśĳĘů`çõh]y»ǃǛҤxÒm~zf}pf|ÜroÈzrKÈĵSƧż؜Ġu¦ö\"],[\"@@sKCGS|úþXgp{ÁX¿ć{ƱȏñZáĔyoÁhA}ŅĆfdŉ_¹Y°ėǩÑ¡H¯¶oMQqð¡Ë|Ñ`ƭŁX½·óÛxğįÅcQs«tȋǅFù^it«Č¯[hAi©á¥ÇĚ×l|¹y¯YȵƓñǙµïċĻ|Düȭ¶¡oŽäÕG\\\\ÄT¿Òõr¯LguÏYęRƩɷŌO\\\\İÐ¢æ^Ŋ ĲȶȆbÜGĝ¬¿ĚVĎgª^íu½jÿĕęjık@Ľ]ėl¥ËĭûÁėéV©±ćn©­ȇÍq¯½YÃÔŉÉNÑÅÝy¹NqáʅDǡËñ­ƁYÅy̱os§ȋµʽǘǏƬɱàưN¢ƔÊuľýľώȪƺɂļxZĈ}ÌŉŪĺœĭFЛĽ̅ȣͽÒŵìƩÇϋÿȮǡŏçƑůĕ~Ç¼ȳÐUfdIxÿ\\\\G zâɏÙOº·pqy£@qþ@Ǟ˽IBäƣzsÂZÁàĻdñ°ŕzéØűzșCìDȐĴĺf®Àľưø@ɜÖÞKĊŇƄ§͑těï͡VAġÑÑ»d³öǍÝXĉĕÖ{þĉu¸ËʅğU̎éhɹƆ̗̮ȘǊ֥ड़ࡰţાíϲäʮW¬®ҌeרūȠkɬɻ̼ãüfƠSצɩςåȈHϚÎKǳͲOðÏȆƘ¼CϚǚ࢚˼ФÔ¤ƌĞ̪Qʤ´¼mȠJˀƲÀɠmǐnǔĎȆÞǠN~ʢĜ¶ƌĆĘźʆȬ˪ĚĒ¸ĞGȖƴƀj`ĢçĶāàŃºēĢĖćYÀŎüôQÐÂŎŞǆŞêƖoˆDĤÕºÑǘÛˤ³̀gńƘĔÀ^ªƂ`ªt¾äƚêĦĀ¼ÐĔǎ¨Ȕ»͠^ˮÊȦƤøxRrŜH¤¸ÂxDÄ|ø˂˜ƮÐ¬ɚwɲFjĔ²Äw°ǆdÀÉ_ĸdîàŎjÊêTĞªŌŜWÈ|tqĢUB~´°ÎFCU¼pĀēƄN¦¾O¶łKĊOjĚj´ĜYp{¦SĚÍ\\\\T×ªV÷Ší¨ÅDK°ßtŇĔK¨ǵÂcḷ̌ĚǣȄĽFlġUĵŇȣFʉɁMğįʏƶɷØŭOǽ«ƽū¹Ʊő̝Ȩ§ȞʘĖiɜɶʦ}¨֪ࠜ̀ƇǬ¹ǨE˦ĥªÔêFxúQEr´Wrh¤Ɛ \\\\talĈDJÜ|[Pll̚¸ƎGú´P¬W¦^¦H]prRn|or¾wLVnÇIujkmon£cX^Bh`¥V¦U¤¸}xRj[^xN[~ªxQ[`ªHÆÂExx^wN¶Ê|¨ìMrdYpoRzNyÀDs~bcfÌ`L¾n|¾T°c¨È¢ar¤`[|òDŞĔöxElÖdHÀI`Ď\\\\Àì~ÆR¼tf¦^¢ķ¶eÐÚMptgjɡČÅyġLûŇV®ÄÈƀĎ°P|ªVVªj¬ĚÒêp¬E|ŬÂc|ÀtƐK f{ĘFĒƌXƲąo½Ę\\\\¥o}Ûu£ç­kX{uĩ«āíÓUŅßŢqŤ¥lyň[oi{¦LńðFȪȖĒL¿Ìf£K£ʺoqNwğc`uetOj×°KJ±qÆġmĚŗos¬qehqsuH{¸kH¡ÊRǪÇƌbȆ¢´äÜ¢NìÉʖ¦â©Ż؛Ç@Vu»Aylßí¹ĵêÝlISò³C¹Ìâ²i¶Ìoú^H²CǜңǄ z¼g^èöŰ_Ĳĕê}gÁnUI«m]jvV¼euhwqAaW_µj»çjioQR¹ēÃßt@r³[ÛlćË^ÍÉáGOUÛOB±XkÅ¹£k|e]olkVÍ¼ÕqtaÏõjgÁ£§U^RLËnX°ÇBz^~wfvypV ¯ƫĉ˭ȫƗŷɿÿĿƑ˃ĝÿÃǃßËőó©ǐȍŒĖM×ÍEyxþp]ÉvïèvƀnÂĴÖ@V~Ĉ³MEĸÅĖtējyÄDXÄxGQuv_i¦aBçw˛wD©{tāmQ{EJ§KPśƘƿ¥@sCTÉ}ɃwƇy±gÑ}T[÷kÐç¦«SÒ¥¸ëBX½HáÅµÀğtSÝÂa[ƣ°¯¦Pï¡]£ġÒk®G²èQ°óMq}EóƐÇ\\\\@áügQÍu¥FTÕ¿Jû]|mvāÎYua^WoÀa·­ząÒot×¶CLƗi¯¤mƎHǊ¤îìɾŊìTdåwsRÖgĒųúÍġäÕ}Q¶¿A[¡{d×uQAMxVvMOmăl«ct[wº_ÇÊjbÂ£ĦS_éQZ_lwgOiýe`YYLq§IÁǳ£ÙË[ÕªuƏ³ÍTs·bÁĽäė[b[ŗfãcn¥îC¿÷µ[ŏÀQ­ōĉm¿Á^£mJVmL[{Ï_£F¥Ö{ŹA}×Wu©ÅaųĳƳhB{·TQqÙIķËZđ©Yc|M¡LeVUóK_QWk_ĥ¿ãZ»X\\\\ĴuUèlG®ěłTĠğDŃOrÍdÆÍz]±ŭ©Å]ÅÐ}UË¥©TċïxgckfWgi\\\\ÏĒ¥HkµEë{»ÏetcG±ahUiñiWsɁ·cCÕk]wȑ|ća}wVaĚá G°ùnM¬¯{ÈÐÆA¥ÄêJxÙ¢hP¢ÛºµwWOóFÁz^ÀŗÎú´§¢T¤ǻƺSėǵhÝÅQgvBHouʝl_o¿Ga{ïq{¥|ſĿHĂ÷aĝÇqZñiñC³ª»E`¨åXēÕqÉû[l}ç@čƘóO¿¡FUsAʽīccocÇS}£IS~ălkĩXçmĈŀÐoÐdxÒuL^T{r@¢ÍĝKén£kQyÅõËXŷƏL§~}kq»IHėǅjĝ»ÑÞoå°qTt|r©ÏS¯·eŨĕx«È[eM¿yupN~¹ÏyN£{©għWí»Í¾səšǅ_ÃĀɗ±ąĳĉʍŌŷSÉA±åǥɋ@ë£R©ąP©}ĹªƏj¹erLDĝ·{i«ƫC£µ\"]],\"encodeOffsets\":[[[127444,52594]],[[113793,40312]]]},\"properties\":{\"cp\":[111.670801,40.818311],\"name\":\"内蒙古\",\"childNum\":2}},{\"id\":\"210000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@L@@sa\"],[\"@@MnNm\"],[\"@@dc\"],[\"@@eÀC@b\"],[\"@@fXwkbrÄ`qg\"],[\"@@^jtWQ\"],[\"@@~ Y]c\"],[\"@@G`ĔN^_¿ZÃM\"],[\"@@iX¶BY\"],[\"@@YZ\"],[\"@@L_{Epf\"],[\"@@^WqCT\\\\\"],[\"@@\\\\[§t|¤_\"],[\"@@m`n_\"],[\"@@Ïxǌ{q_×^Giip\"],[\"@@@é^BntaÊU]x ¯ÄPĲ­°hʙK³VÕ@Y~|EvĹsÇ¦­L^pÃ²ŸÒG Ël]xxÄ_fT¤Ď¤cPC¨¸TVjbgH²sdÎdHt`B²¬GJję¶[ÐhjeXdlwhðSČ¦ªVÊÏÆZÆŶ®²^ÎyÅÎcPqńĚDMħĜŁH­kçvV[ĳ¼WYÀäĦ`XlR`ôLUVfK¢{NZdĒªYĸÌÚJRr¸SA|ƴgŴĴÆbvªØX~źB|¦ÕE¤Ð`\\\\|KUnnI]¤ÀÂĊnŎR®Ő¿¶\\\\ÀøíDm¦ÎbŨabaĘ\\\\ľãÂ¸atÎSƐ´©v\\\\ÖÚÌǴ¤Â¨JKrZ_ZfjþhPkx`YRIjJcVf~sCN¤ EhæmsHy¨SðÑÌ\\\\\\\\ĐRZk°IS§fqŒßýáĞÙÉÖ[^¯ǤŲê´\\\\¦¬ĆPM¯£»uïpùzExanµyoluqe¦W^£ÊL}ñrkqWňûPUP¡ôJoo·U}£[·¨@XĸDXm­ÛÝºGUCÁª½{íĂ^cjk¶Ã[q¤LÉö³cux«zZf²BWÇ®Yß½ve±ÃCý£W{Ú^q^sÑ·¨ÍOt¹·C¥GDrí@wÕKţÃ«V·i}xËÍ÷i©ĝɝǡ]{c±OW³Ya±_ç©HĕoƫŇqr³Lys[ñ³¯OSďOMisZ±ÅFC¥Pq{Ã[Pg}\\\\¿ghćOk^ģÁFıĉĥM­oEqqZûěŉ³F¦oĵhÕP{¯~TÍlªNßYÐ{Ps{ÃVUeĎwk±ŉVÓ½ŽJãÇÇ»Jm°dhcÀffdF~ĀeĖd`sx² ®EżĀdQÂd^~ăÔH¦\\\\LKpĄVez¤NP ǹÓRÆąJSh­a[¦´ÂghwmBÐ¨źhI|VV|p] Â¼èNä¶ÜBÖ¼L`¼bØæKVpoúNZÞÒKxpw|ÊEMnzEQIZZNBčÚFÜçmĩWĪñtÞĵÇñZ«uD±|Əlĳ¥ãn·±PmÍada CLǑkùó¡³Ï«QaċÏOÃ¥ÕđQȥċƭy³ÃA\"]],\"encodeOffsets\":[[[123686,41445]],[[126019,40435]],[[124393,40128]],[[126117,39963]],[[125322,40140]],[[126686,40700]],[[126041,40374]],[[125584,40168]],[[125453,40165]],[[125362,40214]],[[125280,40291]],[[125774,39997]],[[125976,40496]],[[125822,39993]],[[125509,40217]],[[122731,40949]]]},\"properties\":{\"cp\":[123.429096,41.796767],\"name\":\"辽宁\",\"childNum\":16}},{\"id\":\"220000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@pä³PClFbbÍzwBGĭZÅi»lY­ċ²SgkÇ£^Sqd¯R©é£¯S\\\\cZ¹iűƏCuƍÓXoR}M^o£R}oªU­FuuXHlEÅÏ©¤ÛmTþ¤D²ÄufàÀ­XXÈ±AeyYw¬dvõ´KÊ£\\\\rµÄlidā]|î©¾DÂVH¹Þ®ÜWnCķ W§@\\\\¸~¤Vp¸póIO¢VOŇürXql~òÉK]¤¥Xrfkvzpm¶bwyFoúvð¼¤ N°ąO¥«³[éǡű_°Õ\\\\ÚÊĝþâőàerR¨­JYlďQ[ ÏYëÐ§TGztnß¡gFkMāGÁ¤ia ÉÈ¹`\\\\xs¬dĆkNnuNUuP@vRY¾\\\\¢GªóĄ~RãÖÎĢùđŴÕhQxtcæëSɽŉíëǉ£ƍG£nj°KƘµDsØÑpyĆ¸®¿bXp]vbÍZuĂ{n^IüÀSÖ¦EvRÎûh@â[ƏÈô~FNr¯ôçR±­HÑlĢ^¤¢OðævxsŒ]ÞÁTĠs¶¿âÆGW¾ìA¦·TÑ¬è¥ÏÐJ¨¼ÒÖ¼ƦɄxÊ~StD@Ă¼Ŵ¡jlºWvÐzƦZÐ²CH AxiukdGgetqmcÛ£Ozy¥cE}|¾cZk¿uŐã[oxGikfeäT@SUwpiÚFM©£è^Ú`@v¶eňf heP¶täOlÃUgÞzŸU`l}ÔÆUvØ_Ō¬Öi^ĉi§²ÃB~¡ĈÚEgc|DC_Ȧm²rBx¼MÔ¦ŮdĨÃâYxƘDVÇĺĿg¿cwÅ\\\\¹¥Yĭl¤OvLjM_a W`zļMž·\\\\swqÝSAqŚĳ¯°kRē°wx^ĐkǂÒ\\\\]nrĂ}²ĊŲÒøãh·M{yMzysěnĒġV·°G³¼XÀ¤¹i´o¤ŃÈ`ÌǲÄUĞd\\\\iÖmÈBĤÜɲDEh LG¾ƀÄ¾{WaYÍÈĢĘÔRîĐj}ÇccjoUb½{h§Ǿ{KƖµÎ÷GĀÖŠåưÎs­lyiē«`å§H¥Ae^§GK}iã\\\\c]v©ģZmÃ|[M}ģTɟĵÂÂ`ÀçmFK¥ÚíÁbX³ÌQÒHof{]ept·GŋĜYünĎųVY^ydõkÅZW«WUa~U·SbwGçǑiW^qFuNĝ·EwUtW·Ýďæ©PuqEzwAVXRãQ`­©GMehccďÏd©ÑW_ÏYƅ»é\\\\ɹ~ǙG³mØ©BšuT§Ĥ½¢Ã_Ã½L¡ýqT^rme\\\\PpZZbyuybQefµ]UhĿDCmûvaÙNSkCwncćfv~YÇG\"],\"encodeOffsets\":[[130196,42528]]},\"properties\":{\"cp\":[125.3245,43.886841],\"name\":\"吉林\",\"childNum\":1}},{\"id\":\"230000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@ƨĶTLÇyqpÇÛqe{~oyen}s`qiXGù]Ëp½©lÉÁp]Þñ´FĂ^fäîºkàz¼BUvÈ@\"],[\"@@UµNÿ¥īèçHÍøƕ¶Lǽ|g¨|a¾pVidd~ÈiíďÓQġėÇZÎXb½|ſÃH½KFgɱCģÛÇAnjÕc[VĝǱÃËÇ_ £ń³pj£º¿»WH´¯U¸đĢmtĜyzzNN|g¸÷äűÑ±ĉā~mq^[ǁÑďlw]¯xQĔ¯l°řĴrBÞTxr[tŽ¸ĻN_yX`biNKuP£kZĮ¦[ºxÆÀdhĹŀUÈƗCwáZħÄŭcÓ¥»NAw±qȥnD`{ChdÙFć}¢A±Äj¨]ĊÕjŋ«×`VuÓÅ~_kŷVÝyhVkÄãPsOµfgeŇµf@u_Ù ÙcªNªÙEojVxT@ãSefjlwH\\\\pŏäÀvlY½d{F~¦dyz¤PÜndsrhfHcvlwjF£G±DÏƥYyÏu¹XikĿ¦ÏqƗǀOŜ¨LI|FRĂn sª|C˜zxAè¥bfudTrFWÁ¹Am|ĔĕsķÆF´N}ćUÕ@Áĳſmuçuð^ÊýowFzØÎĕNőǏȎôªÌŒǄàĀÄ˄ĞŀƒʀĀƘŸˮȬƬĊ°Uzouxe]}AyÈW¯ÌmKQ]Īºif¸ÄX|sZt|½ÚUÎ lk^p{f¤lºlÆW A²PVÜPHÊâ]ÎĈÌÜk´\\\\@qàsĔÄQºpRij¼èi`¶bXrBgxfv»uUi^v~J¬mVp´£´VWrnP½ì¢BX¬hðX¹^TjVriªjtŊÄmtPGx¸bgRsT`ZozÆO]ÒFôÒOÆŊvÅpcGêsx´DR{AEOr°x|íb³Wm~DVjºéNNËÜ˛ɶ­GxŷCSt}]ûōSmtuÇÃĕNāg»íT«u}ç½BĵÞʣ¥ëÊ¡MÛ³ãȅ¡ƋaǩÈÉQG¢·lG|tvgrrf«ptęŘnÅĢrI²¯LiØsPf_vĠdxM prʹL¤¤eËÀđKïÙVY§]Ióáĥ]ķK¥j|pŇ\\\\kzţ¦šnņäÔVĂîĪ¬|vW®l¤èØrxm¶ă~lÄƯĄ̈́öȄEÔ¤ØQĄĄ»ƢjȦOǺ¨ìSŖÆƬyQv`cwZSÌ®ü±Ǆ]ŀç¬B¬©ńzƺŷɄeeOĨSfm ĊƀP̎ēz©ĊÄÕÊmgÇsJ¥ƔŊśæÎÑqv¿íUOµªÂnĦÁ_½ä@êí£P}Ġ[@gġ}gɊ×ûÏWXá¢užƻÌsNÍ½ƎÁ§čŐAēeL³àydl¦ĘVçŁpśǆĽĺſÊQíÜçÛġÔsĕ¬Ǹ¯YßċġHµ ¡eå`ļrĉŘóƢFìĎWøxÊkƈdƬv|I|·©NqńRŀ¤éeŊŀàŀU²ŕƀBQ£Ď}L¹Îk@©ĈuǰųǨÚ§ƈnTËÇéƟÊcfčŤ^XmHĊĕË«W·ċëx³ǔķÐċJāwİ_ĸȀ^ôWr­°oú¬ĦŨK~ȰCĐ´Ƕ£fNÎèâw¢XnŮeÂÆĶ¾¾xäLĴĘlļO¤ÒĨA¢Êɚ¨®ØCÔ ŬGƠƦYĜĘÜƬDJg_ͥœ@čŅĻA¶¯@wÎqC½Ĉ»NăëKďÍQÙƫ[«ÃígßÔÇOÝáWñuZ¯ĥŕā¡ÑķJu¤E å¯°WKÉ±_d_}}vyõu¬ï¹ÓU±½@gÏ¿rÃ½DgCdµ°MFYxw¿CG£Rƛ½Õ{]L§{qqą¿BÇƻğëܭǊË|c²}Fµ}ÙRsÓpg±QNqǫŋRwŕnéÑÉK«SeYRŋ@{¤SJ}D Ûǖ֍]gr¡µŷjqWÛham³~S«Þ]\"]],\"encodeOffsets\":[[[127123,51780]],[[134456,44547]]]},\"properties\":{\"cp\":[126.642464,45.756967],\"name\":\"黑龙江\",\"childNum\":2}},{\"id\":\"320000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@cþÅPi`ZRu¥É\\\\]~°Y`µÓ^phÁbnÀşúòaĬºTÖŒbe¦¦{¸ZâćNp©Hr|^mjhSEb\\\\afv`sz^lkljÄtg¤D­¾X¿À|ĐiZȀåB·î}GL¢õcßjayBFµÏC^ĭcÙt¿sğH]j{s©HM¢QnDÀ©DaÜÞ·jgàiDbPufjDk`dPOîhw¡ĥ¥GP²ĐobºrYî¶aHŢ´ ]´rılw³r_{£DB_Ûdåuk|Ũ¯F Cºyr{XFye³Þċ¿ÂkĭB¿MvÛpm`rÚã@Ę¹hågËÖƿxnlč¶Åì½Ot¾dJlVJĂǀŞqvnO^JZż·Q}êÍÅmµÒ]ƍ¦Dq}¬R^èĂ´ŀĻĊIÔtĲyQŐĠMNtR®òLhĚs©»}OÓGZz¶A\\\\jĨFäOĤHYJvÞHNiÜaĎÉnFQlNM¤B´ĄNöɂtpŬdfåqm¿QûùŞÚb¤uŃJŴu»¹ĄlȖħŴw̌ŵ²ǹǠ͛hĭłƕrçü±Yxcitğ®jű¢KOķCoy`å®VTa­_Ā]ŐÝɞï²ʯÊ^]afYǸÃĆēĪȣJđ͍ôƋÄÄÍīçÛɈǥ£­ÛmY`ó£Z«§°Ó³QafusNıǅ_k}¢m[ÝóDµ¡RLčiXyÅNïă¡¸iĔÏNÌŕoēdōîåŤûHcs}~Ûwbù¹£¦ÓCtOPrE^ÒogĉIµÛÅʹK¤½phMü`oæŀ\"],\"encodeOffsets\":[[121740,32276]]},\"properties\":{\"cp\":[118.767413,32.041544],\"name\":\"江苏\",\"childNum\":1}},{\"id\":\"330000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@E^dQ]K\"],[\"@@jX^j\"],[\"@@sfbU\"],[\"@@qP\\\\xz[ck\"],[\"@@R¢FX}°[s_\"],[\"@@Cb\\\\}\"],[\"@@e|v\\\\la{u\"],[\"@@v~u}\"],[\"@@QxÂF¯}\"],[\"@@¹nvÞs¯o\"],[\"@@rSkUEj\"],[\"@@bi­ZP\"],[\"@@p[}INf\"],[\"@@À¿\"],[\"@@¹dnb\"],[\"@@rSBnR\"],[\"@@g~h}\"],[\"@@FlEk\"],[\"@@OdPc\"],[\"@@v[u\\\\\"],[\"@@FjâL~wyoo~sµL\\\\\"],[\"@@¬e¹aN\"],[\"@@\\\\nÔ¡q]L³ë\\\\ÿ®QÖ\"],[\"@@ÊA­©[¬\"],[\"@@Kxv­\"],[\"@@@hlIk]\"],[\"@@pW{o||j\"],[\"@@Md|_mC\"],[\"@@¢X£ÏylD¼XtH\"],[\"@@hlÜ[LykAvyfw^E¤\"],[\"@@fp¤MusR\"],[\"@@®_ma~LÁ¬Z\"],[\"@@iMxZ\"],[\"@@ZcYd\"],[\"@@Z~dOSo|A¿qZv\"],[\"@@@`EN¡v\"],[\"@@|TY{\"],[\"@@@n@m\"],[\"@@XWkCT\\\\\"],[\"@@ºwZRkĕWO¢\"],[\"@@X®±GrÆª\\\\ÔáXq{\"],[\"@@ůTG°ĄLHm°UC\"],[\"@@¤aÜx~}dtüGæţŎíĔcŖpMËÐjē¢·ðĄÆMzjWKĎ¢Q¶À_ê_Bıi«pZgf¤Nrq]§ĂN®«H±yƳí¾×ŸīàLłčŴǝĂíÀBŖÕªÁŖHŗŉåqûõi¨hÜ·ñt»¹ýv_[«¸mYL¯QªmĉÅdMgÇjcº«ę¬­K­´B«Âącoċ\\\\xKd¡gěŧ«®á[~ıxu·ÅKsËÉc¢Ù\\\\ĭƛëbf¹­ģSĜkáƉÔ­ĈZB{aMµfzŉfåÂŧįƋǝÊĕġć£g³ne­ą»@­¦S®\\\\ßðChiqªĭiAuA­µ_W¥ƣO\\\\lċĢttC¨£t`PZäuXßBsĻyekOđġĵHuXBµ]×­­\\\\°®¬F¢¾pµ¼kŘó¬Wät¸|@L¨¸µrºù³Ù~§WIZW®±Ð¨ÒÉx`²pĜrOògtÁZ}þÙ]¡FKwsPlU[}¦Rvn`hq¬\\\\nQ´ĘRWb_ rtČFIÖkĦPJ¶ÖÀÖJĈĄTĚòC ²@PúØz©Pî¢£CÈÚĒ±hŖl¬â~nm¨f©iļ«mntuÖZÜÄjL®EÌFª²iÊxØ¨IÈhhst\"],[\"@@o\\\\VzRZ}y\"],[\"@@@°¡mÛGĕ¨§Ianá[ýƤjfæØLäGr\"]],\"encodeOffsets\":[[[125592,31553]],[[125785,31436]],[[125729,31431]],[[125513,31380]],[[125223,30438]],[[125115,30114]],[[124815,29155]],[[124419,28746]],[[124095,28635]],[[124005,28609]],[[125000,30713]],[[125111,30698]],[[125078,30682]],[[125150,30684]],[[124014,28103]],[[125008,31331]],[[125411,31468]],[[125329,31479]],[[125626,30916]],[[125417,30956]],[[125254,30976]],[[125199,30997]],[[125095,31058]],[[125083,30915]],[[124885,31015]],[[125218,30798]],[[124867,30838]],[[124755,30788]],[[124802,30809]],[[125267,30657]],[[125218,30578]],[[125200,30562]],[[124968,30474]],[[125167,30396]],[[124955,29879]],[[124714,29781]],[[124762,29462]],[[124325,28754]],[[123990,28459]],[[125366,31477]],[[125115,30363]],[[125369,31139]],[[122495,31878]],[[125329,30690]],[[125192,30787]]]},\"properties\":{\"cp\":[120.153576,30.287459],\"name\":\"浙江\",\"childNum\":45}},{\"id\":\"340000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@^iuLX^\"],[\"@@e©Ehl\"],[\"@@°ZÆëĎµmkǀwÌÕæhºgBĝâqÙĊzÖgņtÀÁĂÆáhEz|WzqD¹°Eŧl{ævÜcA`¤C`|´qxĲkq^³³GšµbíZ¹qpa±ď OH¦Ħx¢gPícOl_iCveaOjChß¸iÝbÛªCC¿mRV§¢A|t^iĠGÀtÚsd]ĮÐDE¶zAb àiödK¡~H¸íæAǿYj{ď¿À½W®£ChÃsikkly]_teu[bFaTign{]GqªoĈMYá|·¥f¥őaSÕėNµñĞ«Im_m¿Âa]uĜp Z_§{Cäg¤°r[_YjÆOdý[I[á·¥Q_nùgL¾mvˊBÜÆ¶ĊJhpc¹O]iŠ]¥ jtsggJÇ§w×jÉ©±EFË­KiÛÃÕYvsm¬njĻª§emná}k«ŕgđ²ÙDÇ¤í¡ªOy×Où±@DñSęćăÕIÕ¿IµĥOjNÕËT¡¿tNæŇàåyķrĕq§ÄĩsWÆßF¶X®¿mwRIÞfßoG³¾©uyHį{Ɓħ¯AFnuPÍÔzVdàôº^Ðæd´oG¤{S¬ćxã}ŧ×Kǥĩ«ÕOEÐ·ÖdÖsƘÑ¨[Û^Xr¢¼§xvÄÆµ`K§ tÒ´Cvlo¸fzŨð¾NY´ı~ÉĔēßúLÃÃ_ÈÏ|]ÂÏFlg`ben¾¢pUh~ƴĖ¶_r sĄ~cƈ]|r c~`¼{À{ȒiJjz`îÀT¥Û³]u}fïQl{skloNdjäËzDvčoQďHI¦rbtHĔ~BmlRV_ħTLnñH±DL¼Lªl§Ťa¸ĚlK²\\\\RòvDcÎJbt[¤D@®hh~kt°ǾzÖ@¾ªdbYhüóZ ň¶vHrľ\\\\ÊJuxAT|dmÀO[ÃÔG·ĚąĐlŪÚpSJ¨ĸLvÞcPæķŨ®mÐálwKhïgA¢ųÆ©Þ¤OÈm°K´\"]],\"encodeOffsets\":[[[121722,32278]],[[119475,30423]],[[119168,35472]]]},\"properties\":{\"cp\":[117.283042,31.86119],\"name\":\"安徽\",\"childNum\":3}},{\"id\":\"350000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@zht´]\"],[\"@@aj^~ĆG©O\"],[\"@@ed¨C}}i\"],[\"@@@vPGsQ\"],[\"@@sBzddW]Q\"],[\"@@S¨Q{\"],[\"@@NVucW\"],[\"@@qptBAq\"],[\"@@¸[mu\"],[\"@@Q\\\\pD]_\"],[\"@@jSwUadpF\"],[\"@@eXª~\"],[\"@@AjvFso\"],[\"@@fT_Çí\\\\v|ba¦jZÆy°\"],[\"@@IjJi\"],[\"@@wJIx«¼AoNe{M­\"],[\"@@K±¡ÓČäeZ\"],[\"@@k¡¹Eh~c®wBkUplÀ¡I~Māe£bN¨gZý¡a±Öcp©PhI¢QqÇGj|¥U g[Ky¬ŏv@OptÉEF\\\\@ åA¬V{XģĐBycpě¼³Ăp·¤¥ohqqÚ¡ŅLs^Ã¡§qlÀhH¨MCe»åÇGD¥zPO£čÙkJA¼ßėuĕeûÒiÁŧSW¥Qûŗ½ùěcÝ§SùĩąSWó«íęACµeRåǃRCÒÇZÍ¢ź±^dlstjD¸ZpuÔâÃH¾oLUêÃÔjjēò´ĄWƛ^Ñ¥Ħ@ÇòmOw¡õyJyD}¢ďÑÈġfZda©º²z£NjD°Ötj¶¬ZSÎ~¾c°¶ÐmxO¸¢Pl´SL|¥AȪĖMņĲg®áIJČĒü` QF¬h|ĂJ@zµ |ê³È ¸UÖŬŬÀEttĸr]ðM¤ĶĲHtÏ AĬkvsq^aÎbvdfÊòSD´Z^xPsĂrvƞŀjJd×ŘÉ ®AÎ¦ĤdxĆqAZRÀMźnĊ»İÐZ YXæJyĊ²·¶q§·K@·{sXãô«lŗ¶»o½E¡­«¢±¨Y®Ø¶^AvWĶGĒĢPlzfļtàAvWYãO_¤sD§ssČġ[kƤPX¦`¶®BBvĪjv©jx[L¥àï[F¼ÍË»ğV`«Ip}ccÅĥZEãoP´B@D¸m±z«Ƴ¿å³BRØ¶Wlâþäą`]Z£Tc ĹGµ¶Hm@_©k¾xĨôȉðX«½đCIbćqK³ÁÄš¬OAwã»aLŉËĥW[ÂGIÂNxĳ¤D¢îĎÎB§°_JGs¥E@¤ućPåcuMuw¢BI¿]zG¹guĮck\\\\_\"]],\"encodeOffsets\":[[[123250,27563]],[[122541,27268]],[[123020,27189]],[[122916,27125]],[[122887,26845]],[[122808,26762]],[[122568,25912]],[[122778,26197]],[[122515,26757]],[[122816,26587]],[[123388,27005]],[[122450,26243]],[[122578,25962]],[[121255,25103]],[[120987,24903]],[[122339,25802]],[[121042,25093]],[[122439,26024]]]},\"properties\":{\"cp\":[119.306239,26.075302],\"name\":\"福建\",\"childNum\":18}},{\"id\":\"360000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ĢĨƐgļ¼ÂMD~ņªe^\\\\^§ý©j×cZØ¨zdÒa¶lÒJìõ`oz÷@¤uŞ¸´ôęöY¼HČƶajlÞƩ¥éZ[|h}^U  ¥pĄžƦO lt¸Æ Q\\\\aÆ|CnÂOjt­ĚĤdÈF`¶@Ðë ¦ōÒ¨SêvHĢûXD®QgÄWiØPÞìºr¤ǆNĠ¢lĄtZoCƞÔºCxrpĠV®Ê{f_Y`_eq®Aot`@oDXfkp¨|s¬\\\\DÄSfè©Hn¬^DhÆyøJhØxĢĀLÊƠPżċĄwȠĚ¦G®ǒĤäTŠÆ~Ħw«|TF¡nc³Ïå¹]ĉđxe{ÎÓvOEm°BƂĨİ|Gvz½ª´HàpeJÝQxnÀW­EµàXÅĪt¨ÃĖrÄwÀFÎ|ňÓMå¼ibµ¯»åDT±m[r«_gmQu~¥V\\\\OkxtL E¢Ú^~ýêPóqoě±_Êw§ÑªåƗā¼mĉŹ¿NQYBąrwģcÍ¥B­ŗÊcØiIƝĿuqtāwO]³YCñTeÉcaubÍ]trluīBÐGsĵıN£ï^ķqss¿FūūVÕ·´Ç{éĈýÿOER_đûIċâJh­ŅıNȩĕB¦K{Tk³¡OP·wnµÏd¯}½TÍ«YiµÕsC¯iM¤­¦¯P|ÿUHvhe¥oFTuõ\\\\OSsMòđƇiaºćXĊĵà·çhƃ÷Ç{ígu^đgm[×zkKN¶Õ»lčÓ{XSÆv©_ÈëJbVkĔVÀ¤P¾ºÈMÖxlò~ªÚàGĂ¢B±ÌKyáV¼Ã~­`gsÙfIƋlę¹e|~udjuTlXµf`¿Jd[\\\\L²\"],\"encodeOffsets\":[[116689,26234]]},\"properties\":{\"cp\":[115.892151,28.676493],\"name\":\"江西\",\"childNum\":1}},{\"id\":\"370000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@Xjd]{K\"],[\"@@itbFHy\"],[\"@@HlGk\"],[\"@@TGy\"],[\"@@K¬U\"],[\"@@WdXc\"],[\"@@PtOs\"],[\"@@LnXhc\"],[\"@@ppVu]Or\"],[\"@@cdzAUa\"],[\"@@udRhnCI\"],[\"@@oIpR\"],[\"@@Ľč{fzƤîKÎMĮ]ZF½Y]â£ph¶¨râøÀÎǨ¤^ºÄGz~grĚĜlĞÆLĆǆ¢Îo¦cvKbgr°WhmZp L]LºcUÆ­nżĤÌĒbAnrOA´ȊcÀbƦUØrĆUÜøĬƞEzVL®öØBkŖÝĐĖ¹ŧ̄±ÀbÎÉnb²ĦhņBĖįĦåXćì@L¯´ywƕCéÃµė ƿ¸lµ¾Z|ZWyFY¨Mf~C¿`à_RÇzwƌfQnny´INoƬèôº|sTJULîVjǎ¾ĒØDz²XPn±ŴPè¸ŔLƔÜƺ_TüÃĤBBċÈöA´faM¨{«M`¶d¡ôÖ°mȰBÔjj´PM|c^d¤u¤Û´ä«ƢfPk¶Môl]Lb}su^ke{lCMrDÇ­]NÑFsmoõľHyGă{{çrnÓEƕZGª¹Fj¢ïWuøCǷë¡ąuhÛ¡^KxC`C\\\\bÅxì²ĝÝ¿_NīCȽĿåB¥¢·IŖÕy\\\\¹kxÃ£Č×GDyÃ¤ÁçFQ¡KtŵƋ]CgÏAùSedcÚźuYfyMmhUWpSyGwMPqŀÁ¼zK¶G­Y§Ë@´śÇµƕBm@IogZ¯uTMx}CVKï{éƵP_K«pÛÙqċtkkù]gTğwoɁsMõ³ăAN£MRkmEÊčÛbMjÝGuIZGPģãħE[iµBEuDPÔ~ª¼ęt]ûG§¡QMsğNPŏįzs£Ug{đJĿļā³]ç«Qr~¥CƎÑ^n¶ÆéÎR~Ż¸YI] PumŝrƿIā[xeÇ³L¯v¯s¬ÁY~}ťuŁgƋpÝĄ_ņī¶ÏSR´ÁP~¿Cyċßdwk´SsX|t`Ä ÈðAªìÎT°¦Dda^lĎDĶÚY°`ĪŴǒàŠv\\\\ebZHŖR¬ŢƱùęOÑM­³FÛWp[\"]],\"encodeOffsets\":[[[123806,39303]],[[123821,39266]],[[123742,39256]],[[123702,39203]],[[123649,39066]],[[123847,38933]],[[123580,38839]],[[123894,37288]],[[123043,36624]],[[123344,38676]],[[123522,38857]],[[123628,38858]],[[118260,36742]]]},\"properties\":{\"cp\":[117.000923,36.675807],\"name\":\"山东\",\"childNum\":13}},{\"id\":\"410000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ýLùµP³swIÓxcŢĞð´E®ÚPtĴXØxÂ¶@«ŕŕQGYfa[şußǩđš_X³ĳÕčC]kbc¥CS¯ëÍB©÷³­Si_}mYTt³xlàcČzÀD}ÂOQ³ÐTĨ¯ƗòËŖ[hłŦv~}ÂZ«¤lPÇ£ªÝŴÅR§ØnhctâknÏ­ľŹUÓÝdKuķI§oTũÙďkęĆH¸Ó\\\\Ä¿PcnS{wBIvÉĽ[GqµuŇôYgûZca©@½Õǽys¯}lgg@­C\\\\£asIdÍuCQñ[L±ęk·ţb¨©kK»KC²òGKmĨS`UQnk}AGēsqaJ¥ĐGRĎpCuÌy ã iMcplk|tRkðev~^´¦ÜSí¿_iyjI|ȑ|¿_»d}q^{Ƈdă}tqµ`Ƴĕg}V¡om½faÇo³TTj¥tĠRyK{ùÓjuµ{t}uËRivGçJFjµÍyqÎàQÂFewixGw½Yŷpµú³XU½ġyłåkÚwZX·l¢Á¢KzOÎÎjc¼htoDHr|­J½}JZ_¯iPq{tę½ĕ¦Zpĵø«kQĹ¤]MÛfaQpě±ǽ¾]u­Fu÷nčÄ¯ADp}AjmcEÇaª³o³ÆÍSƇĈÙDIzËčľ^KLiÞñ[aA²zzÌ÷D|[íÄ³gfÕÞd®|`Ć~oĠƑô³ŊD×°¯CsøÀ«ìUMhTº¨¸ǡîSÔDruÂÇZÖEvPZW~ØÐtĄE¢¦Ðy¸bô´oŬ¬²Ês~]®tªapŎJ¨Öº_Ŕ`Ŗ^Đ\\\\Ĝu~m²Ƹ¸fWĦrƔ}Î^gjdfÔ¡J}\\\\n C¦þWxªJRÔŠu¬ĨĨmFdM{\\\\d\\\\YÊ¢ú@@¦ª²SÜsC}fNècbpRmlØ^gd¢aÒ¢CZZxvÆ¶N¿¢T@uC¬^ĊðÄn|lGlRjsp¢ED}Fio~ÔN~zkĘHVsǲßjŬŢ`Pûàl¢\\\\ÀEhİgÞē X¼Pk|m\"],\"encodeOffsets\":[[118256,37017]]},\"properties\":{\"cp\":[113.665412,34.757975],\"name\":\"河南\",\"childNum\":1}},{\"id\":\"420000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@AB\"],[\"@@lskt\"],[\"@@¾«}{ra®pîÃ\\\\{øCËyyB±b\\\\òÝjKL ]ĎĽÌJyÚCƈćÎT´Å´pb©ÈdFin~BCo°BĎÃømv®E^vǾ½Ĝ²RobÜeN^ĺ£R¬lĶ÷YoĖ¥Ě¾|sOr°jY`~I¾®I{GqpCgyl{£ÍÍyPLÂ¡¡¸kWxYlÙæŁĢz¾V´W¶ùŸo¾ZHxjwfxGNÁ³Xéæl¶EièIH ujÌQ~v|sv¶Ôi|ú¢FhQsğ¦SiŠBgÐE^ÁÐ{čnOÂÈUÎóĔÊēĲ}Z³½Mŧïeyp·uk³DsÑ¨L¶_ÅuÃ¨w»¡WqÜ]\\\\Ò§tƗcÕ¸ÕFÏǝĉăxŻČƟOKÉġÿ×wg÷IÅzCg]m«ªGeçÃTC«[t§{loWeC@ps_Bp­rf_``Z|ei¡oċMqow¹DƝÓDYpûsYkıǃ}s¥ç³[§cY§HK«Qy]¢wwö¸ïx¼ņ¾Xv®ÇÀµRĠÐHM±cÏdƒǍũȅȷ±DSyúĝ£ŤĀàtÖÿï[îb\\\\}pĭÉI±Ñy¿³x¯No|¹HÏÛmjúË~TuęjCöAwě¬Rđl¯ Ñb­ŇTĿ_[IčĄʿnM¦ğ\\\\É[T·k¹©oĕ@A¾wya¥Y\\\\¥Âaz¯ãÁ¡k¥ne£ÛwE©Êō¶˓uoj_U¡cF¹­[WvP©whuÕyBF`RqJUw\\\\i¡{jEPïÿ½fćQÑÀQ{°fLÔ~wXgītêÝ¾ĺHd³fJd]HJ²EoU¥HhwQsƐ»Xmg±çve]DmÍPoCc¾_hhøYrŊU¶eD°Č_N~øĹĚ·`z]Äþp¼äÌQv\\\\rCé¾TnkžŐÚÜa¼ÝƆĢ¶ÛodĔňÐ¢JqPb ¾|J¾fXƐîĨ_Z¯À}úƲN_ĒÄ^ĈaŐyp»CÇÄKñL³ġM²wrIÒŭxjb[n«øæà ^²­h¯ÚŐªÞ¸Y²ĒVø}Ā^İ´LÚm¥ÀJÞ{JVųÞŃx×sxxƈē ģMřÚðòIfĊŒ\\\\Ʈ±ŒdÊ§ĘDvČ_Àæ~Dċ´A®µ¨ØLV¦êHÒ¤\"]],\"encodeOffsets\":[[[113712,34000]],[[115612,30507]],[[113649,34054]]]},\"properties\":{\"cp\":[114.298572,30.584355],\"name\":\"湖北\",\"childNum\":3}},{\"id\":\"430000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@nFTs\"],[\"@@ßÅÆá½ÔXrCOËRïÿĩ­TooQyÓ[ŅBE¬ÎÓXaį§Ã¸G °ITxpúxÚĳ¥ÏĢ¾edÄ©ĸGàGhM¤Â_U}Ċ}¢pczfþg¤ÇòAVM\"],[\"@@©KA·³CQ±Á«³BUƑ¹AtćOwD]JiØSm¯b£ylXHËÑ±H«C^õľAÅ§¤É¥ïyuǙuA¢^{ÌC´­¦ŷJ£^[ª¿ĕ~ƇN skóā¹¿ï]ă~÷O§­@Vm¡Qđ¦¢Ĥ{ºjÔª¥nf´~Õo×ÛąMąıuZmZcÒ ĲĪ²SÊǄŶ¨ƚCÖŎªQØ¼rŭ­«}NÏürÊ¬mjr@ĘrTW ­SsdHzƓ^ÇÂyUi¯DÅYlŹu{hT}mĉ¹¥ěDÿë©ıÓ[Oº£¥ótł¹MÕƪ`PDiÛU¾ÅâìUñBÈ£ýhedy¡oċ`pfmjP~kZaZsÐd°wj§@Ĵ®w~^kÀÅKvNmX\\\\¨aŃqvíó¿F¤¡@ũÑVw}S@j}¾«pĂrªg àÀ²NJ¶¶DôK|^ª°LX¾ŴäPĪ±£EXd^¶ĲÞÜ~u¸ǔMRhsRe`ÄofIÔ\\\\Ø  ićymnú¨cj ¢»GČìƊÿÐ¨XeĈĀ¾Oð Fi ¢|[jVxrIQ_EzAN¦zLU`cªxOTu RLÄ¢dVi`p˔vŎµªÉF~Ød¢ºgİàw¸Áb[¦Zb¦z½xBĖ@ªpºlS¸Ö\\\\Ĕ[N¥ˀmĎăJ\\\\ŀ`ňSÚĖÁĐiOĜ«BxDõĚivSÌ}iùÜnÐºG{p°M´wÀÒzJ²ò¨ oTçüöoÛÿñőĞ¤ùTz²CȆȸǎŪƑÐc°dPÎğË¶[È½u¯½WM¡­ÉB·rínZÒ `¨GA¾\\\\pēXhÃRC­üWGġuTé§ŎÑ©ò³I±³}_EÃħg®ęisÁPDmÅ{b[RÅs·kPŽƥóRoOV~]{g\\\\êYƪ¦kÝbiċƵGZ»Ěõó·³vŝ£ø@pyö_ëIkÑµbcÑ§y×dYØªiþ¨[]f]Ņ©C}ÁN»hĻħƏĩ\"]],\"encodeOffsets\":[[[115640,30489]],[[112543,27312]],[[116690,26230]]]},\"properties\":{\"cp\":[112.982279,28.19409],\"name\":\"湖南\",\"childNum\":3}},{\"id\":\"440000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@QdAua\"],[\"@@lxDLo\"],[\"@@sbhNLo\"],[\"@@Ă ā\"],[\"@@WltO[[\"],[\"@@Kr]S\"],[\"@@eI]y\"],[\"@@I|Mym\"],[\"@@Û³LS¼Y\"],[\"@@nvºBëui©`¾\"],[\"@@zdÛJw®\"],[\"@@°¯\"],[\"@@a yAª¸ËJIxØ@ĀHAmÃV¡ofuo\"],[\"@@sŗÃÔėAƁZÄ ~°ČPäh\"],[\"@@¶ÝÌvmĞh­ıQ\"],[\"@@HdSjĒ¢D}waru«ZqadYM\"],[\"@@el\\\\LqqU\"],[\"@@~rMo\\\\\"],[\"@@f^C\"],[\"@@øPªoj÷ÍÝħXČx°Q¨ıXNv\"],[\"@@gÇƳo[~tly\"],[\"@@EÆC¿\"],[\"@@OP\"],[\"@@wđógĝ[³¡VÙæÅöMÌ³¹pÁaËýý©D©ÜJŹƕģGą¤{ÙūÇO²«BƱéAÒĥ¡«BhlmtÃPµyU¯ucd·w_bŝcīímGO|KPȏŹãŝIŕŭŕ@Óoo¿ē±ß}ŭĲWÈCőâUâǙIğŉ©IĳE×Á³AówXJþ±ÌÜÓĨ£L]ĈÙƺZǾĆĖMĸĤfÎĵlŨnÈĐtFFĤêk¶^k°f¶g}®Faf`vXŲxl¦ÔÁ²¬Ð¦pqÊÌ²iXØRDÎ}Ä@ZĠsx®AR~®ETtĄZƈfŠŠHâÒÐAµ\\\\S¸^wĖkRzalŜ|E¨ÈNĀňZTpBh£\\\\ĎƀuXĖtKL¶G|»ĺEļĞ~ÜĢÛĊrOÙîvd]n¬VÊĜ°RÖpMƂªFbwEÀ©\\\\¤]ŸI®¥D³|Ë]CöAŤ¦æ´¥¸Lv¼¢ĽBaôF~®²GÌÒEYzk¤°ahlVÕI^CxĈPsBƒºV¸@¾ªR²ĨN]´_eavSivc}p}Đ¼ƌkJÚe th_¸ ºx±ò_xNË²@ă¡ßH©Ùñ}wkNÕ¹ÇO½¿£ĕ]ly_WìIÇª`uTÅxYĒÖ¼kÖµMjJÚwn\\\\hĒv]îh|ÈƄøèg¸Ķß ĉĈWb¹ƀdéĘNTtP[öSvrCZaGubo´ŖÒÇĐ~¡zCIözx¢PnÈñ @ĥÒ¦]ƞV}³ăĔñiiÄÓVépKG½ÄÓávYoC·sitiaÀyŧÎ¡ÈYDÑům}ý|m[węõĉZÅxUO}÷N¹³ĉo_qtăqwµŁYÙǝŕ¹tïÛUÃ¯mRCºĭ|µÕÊK½Rē ó]GªęAx»HO£|ām¡diď×YïYWªŉOeÚtĐ«zđ¹TāúEá²\\\\ķÍ}jYàÙÆſ¿Çdğ·ùTßÇţʄ¡XgWÀǇğ·¿ÃOj YÇ÷Qěi\"]],\"encodeOffsets\":[[[117381,22988]],[[116552,22934]],[[116790,22617]],[[116973,22545]],[[116444,22536]],[[116931,22515]],[[116496,22490]],[[116453,22449]],[[113301,21439]],[[118726,21604]],[[118709,21486]],[[113210,20816]],[[115482,22082]],[[113171,21585]],[[113199,21590]],[[115232,22102]],[[115739,22373]],[[115134,22184]],[[113056,21175]],[[119573,21271]],[[119957,24020]],[[115859,22356]],[[116561,22649]],[[116285,22746]]]},\"properties\":{\"cp\":[113.280637,23.125178],\"name\":\"广东\",\"childNum\":24}},{\"id\":\"450000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@H TQ§A\"],[\"@@ĨÊªLƊDÎĹĐCǦė¸zÚGn£¾rªŀÜt¬@ÖÚSx~øOŒŶÐÂæȠ\\\\ÈÜObĖw^oÞLf¬°bI lTØBÌF£Ć¹gñĤaYt¿¤VSñK¸¤nM¼JE±½¸ñoÜCƆæĪ^ĚQÖ¦^f´QüÜÊz¯lzUĺš@ìp¶n]sxtx¶@~ÒĂJb©gk{°~c°`Ô¬rV\\\\la¼¤ôá`¯¹LCÆbxEræOv[H­[~|aB£ÖsºdAĐzNÂðsÞÆĤªbab`ho¡³F«èVlo¤ÔRzpp®SĪº¨ÖºNĳd`a¦¤F³ºDÎńĀìCĜº¦Ċ~nS|gźvZkCÆj°zVÈÁƔ]LÊFZgčP­kini«qÇczÍY®¬Ů»qR×ō©DÕ§ƙǃŵTÉĩ±ıdÑnYYĲvNĆĆØÜ Öp}e³¦m©iÓ|¹ħņ|ª¦QF¢Â¬ʖovg¿em^ucà÷gÕuíÙćĝ}FĻ¼Ĺ{µHKsLSđƃrč¤[AgoSŇYMÿ§Ç{FśbkylQxĕ]T·¶[BÑÏGáşşƇeăYSs­FQ}­BwtYğÃ@~CÍQ ×WjË±rÉ¥oÏ ±«ÓÂ¥kwWűmcih³K~µh¯e]lµélEģEďsmÇŧē`ãògK_ÛsUʝćğ¶höO¤Ǜn³c`¡y¦CezYwa[ďĵűMę§]XÎ_íÛ]éÛUćİÕBƣ±dy¹T^dûÅÑŦ·PĻþÙ`K¦¢ÍeĥR¿³£[~äu¼dltW¸oRM¢ď\\\\z}Æzdvň{ÎXF¶°Â_ÒÂÏL©ÖTmu¼ãlīkiqéfA·Êµ\\\\őDc¥ÝFyÔćcűH_hLÜêĺĐ¨c}rn`½Ì@¸¶ªVLhŒ\\\\Ţĺk~Ġið°|gtTĭĸ^xvKVGréAébUuMJVÃO¡qĂXËSģãlýà_juYÛÒBG^éÖ¶§EGÅzěƯ¤EkN[kdåucé¬dnYpAyČ{`]þ¯TbÜÈk¡ĠvàhÂƄ¢Jî¶²\"]],\"encodeOffsets\":[[[111707,21520]],[[107619,25527]]]},\"properties\":{\"cp\":[108.320004,22.82402],\"name\":\"广西\",\"childNum\":2}},{\"id\":\"460000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@¦Ŝil¢XƦƞòïè§ŞCêɕrŧůÇąĻõ·ĉ³œ̅kÇm@ċȧŧĥĽʉ­ƅſȓÒË¦ŝE}ºƑ[ÍĜȋ gÎfǐÏĤ¨êƺ\\\\Ɔ¸ĠĎvʄȀÐ¾jNðĀÒRZǆzÐŘÎ°H¨Ƣb²_Ġ \"],\"encodeOffsets\":[[112750,20508]]},\"properties\":{\"cp\":[110.33119,20.031971],\"name\":\"海南\",\"childNum\":1}},{\"id\":\"510000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@LqKr\"],[\"@@[ĻéV£_ţġñpG réÏ·~ąSfy×Í·ºſƽiÍıƣıĻmHH}siaX@iÇ°ÁÃ×t«­T¤JJJyJÈ`Ohß¦¡uËhIyCjmÿwZGTiSsOB²fNmsPa{M{õE^Hj}gYpaeu¯oáwHjÁ½M¡pMuåmni{fk\\\\oÎqCwEZ¼KĝAy{m÷LwO×SimRI¯rKõBS«sFe]fµ¢óY_ÆPRcue°Cbo×bd£ŌIHgtrnyPt¦foaXďxlBowz_{ÊéWiêEGhÜ¸ºuFĈIxf®Y½ĀǙ]¤EyF²ċw¸¿@g¢§RGv»áW`ÃĵJwi]t¥wO­½a[×]`Ãi­üL¦LabbTÀåc}ÍhÆh®BHî|îºÉk­¤Sy£ia©taį·Ɖ`ō¥UhOĝLk}©Fos´JmµlŁuønÑJWÎªYÀïAetTŅÓGË«bo{ıwodƟ½OġÜÂµxàNÖ¾P²§HKv¾]|BÆåoZ`¡Ø`ÀmºĠ~ÌÐ§nÇ¿¤]wğ@srğu~Io[é±¹ ¿ſđÓ@qg¹zƱřaí°KtÇ¤V»Ã[ĩǭƑ^ÇÓ@áťsZÏÅĭƋěpwDóÖáŻneQËq·GCœýS]x·ýq³OÕ¶Qzßti{řáÍÇWŝŭñzÇWpç¿JXĩè½cFÂLiVjx}\\\\NŇĖ¥GeJA¼ÄHfÈu~¸Æ«dE³ÉMA|bÒćhG¬CMõƤąAvüVéŀ_VÌ³ĐwQj´·ZeÈÁ¨X´Æ¡Qu·»ÕZ³ġqDoy`L¬gdp°şp¦ėìÅĮZ°Iähzĵf²å ĚÑKpIN|Ñz]ń·FU×é»R³MÉ»GM«kiér}Ã`¹ăÞmÈnÁîRǀ³ĜoİzŔwǶVÚ£À]ɜ»ĆlƂ²ĠþTº·àUȞÏʦ¶I«dĽĢdĬ¿»Ĕ×h\\\\c¬ä²GêëĤł¥ÀǿżÃÆMº}BÕĢyFVvwxBèĻĒ©ĈtCĢɽŠȣ¦āæ·HĽîôNÔ~^¤Ɗu^s¼{TA¼ø°¢İªDè¾Ň¶ÝJ®Z´ğ~Sn|ªWÚ©òzPOȸbð¢|øĞŒQìÛÐ@ĞǎRS¤Á§di´ezÝúØã]HqkIþËQÇ¦ÃsÇ¤[E¬ÉŪÍxXƒ·ÖƁİlƞ¹ª¹|XÊwnÆƄmÀêErĒtD®ċæcQE®³^ĭ¥©l}äQtoŖÜqÆkµªÔĻĴ¡@Ċ°B²Èw^^RsºTĀ£ŚæQPJvÄz^Đ¹Æ¯fLà´GC²dt­ĀRt¼¤ĦOðğfÔðDŨŁĞƘïPÈ®âbMüÀXZ ¸£@Å»»QÉ­]dsÖ×_Í_ÌêŮPrĔĐÕGĂeZÜîĘqBhtO ¤tE[h|YÔZśÎs´xº±Uñt|OĩĠºNbgþJy^dÂY Į]Řz¦gC³R`Āz¢Aj¸CL¤RÆ»@­Ŏk\\\\Ç´£YW}z@Z}Ã¶oû¶]´^NÒ}èNªPÍy¹`S°´ATeVamdUĐwʄvĮÕ\\\\uÆŗ¨Yp¹àZÂmWh{á}WØǍÉüwga§áCNęÎ[ĀÕĪgÖÉªXøx¬½Ů¦¦[NÎLÜUÖ´òrÙŠxR^JkĳnDX{U~ET{ļº¦PZcjF²Ė@pg¨B{u¨ŦyhoÚD®¯¢ WòàFÎ¤¨GDäz¦kŮPġqË¥À]eâÚ´ªKxīPÖ|æ[xÃ¤JÞĥsNÖ½I¬nĨY´®ÐƐmDŝuäđđEbee_v¡}ìęǊē}qÉåT¯µRs¡M@}ůaa­¯wvƉåZw\\\\Z{åû^\"]],\"encodeOffsets\":[[[108815,30935]],[[110617,31811]]]},\"properties\":{\"cp\":[104.065735,30.659462],\"name\":\"四川\",\"childNum\":2}},{\"id\":\"520000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@G\\\\lY£in\"],[\"@@q|mc¯tÏVSÎ\"],[\"@@hÑ£IsNgßHHªķÃh_¹¡ĝÄ§ń¦uÙùgS¯JH|sÝÅtÁïyMDč»eÕtA¤{b\\\\}G®u\\\\åPFqwÅaDK°ºâ_£ùbµmÁÛĹM[q|hlaªāI}Ñµ@swtwm^oµDéĽŠyVky°ÉûÛR³e¥]RÕěħ[ƅåÛDpJiVÂF²I»mN·£LbÒYbWsÀbpkiTZĄă¶Hq`ĥ_J¯ae«KpÝx]aĕÛPÇȟ[ÁåŵÏő÷Pw}TÙ@Õs«ĿÛq©½m¤ÙH·yǥĘĉBµĨÕnđ]K©œáGçş§ÕßgǗĦTèƤƺ{¶ÉHÎd¾ŚÊ·OÐjXWrãLyzÉAL¾ę¢bĶėy_qMĔąro¼hĊw¶øV¤w²Ĉ]ÊKx|`ź¦ÂÈdrcÈbe¸`I¼čTF´¼Óýȃr¹ÍJ©k_șl³´_pĐ`oÒh¶pa^ÓĔ}D»^Xy`d[KvJPhèhCrĂĚÂ^Êƌ wZL­Ġ£ÁbrzOIlMMĪŐžËr×ÎeŦtw|¢mKjSǘňĂStÎŦEtqFT¾Eì¬¬ôxÌO¢ K³ŀºäYPVgŎ¦ŊmŞ¼VZwVlz¤£Tl®ctĽÚó{G­AÇge~Îd¿æaSba¥KKûj®_Ä^\\\\Ø¾bP®¦x^sxjĶI_Ä Xâ¼Hu¨Qh¡À@Ëô}±GNìĎlT¸`V~R°tbÕĊ`¸úÛtÏFDu[MfqGH·¥yAztMFe|R_GkChZeÚ°tov`xbDnÐ{E}ZèxNEÞREn[Pv@{~rĆAB§EO¿|UZ~ìUf¨J²ĂÝÆsªB`s¶fvö¦Õ~dÔq¨¸º»uù[[§´sb¤¢zþF¢ÆÀhÂW\\\\ıËIÝo±ĭŠ£þÊs}¡R]ěDg´VG¢j±®èºÃmpU[Áëº°rÜbNu¸}º¼`niºÔXĄ¤¼ÔdaµÁ_ÃftQQgR·Ǔv}Ý×ĵ]µWc¤F²OĩųãW½¯K©]{LóµCIµ±Mß¿h©āq¬o½~@i~TUxŪÒ¢@£ÀEîôruńb[§nWuMÆLl¿]x}ĳ­½\"]],\"encodeOffsets\":[[[112158,27383]],[[112105,27474]],[[112095,27476]]]},\"properties\":{\"cp\":[106.713478,26.578343],\"name\":\"贵州\",\"childNum\":3}},{\"id\":\"530000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@[ùx½}ÑRHYīĺûsÍniEoã½Ya²ė{c¬ĝgĂsAØÅwďõzFjw}«Dx¿}Uũlê@HÅ­F¨ÇoJ´Ónũuą¡Ã¢pÒÅØ TF²xa²ËXcÊlHîAßËŁkŻƑŷÉ©hW­æßUËs¡¦}teèÆ¶StÇÇ}Fd£jĈZĆÆ¤Tč\\\\D}O÷£U§~ŃGåŃDĝ¸Tsd¶¶Bª¤u¢ŌĎo~t¾ÍŶÒtD¦ÚiôözØX²ghįh½Û±¯ÿm·zR¦Ɵ`ªŊÃh¢rOÔ´£Ym¼èêf¯ŪĽncÚbw\\\\zlvWªâ ¦gmĿBĹ£¢ƹřbĥkǫßeeZkÙIKueT»sVesbaĕ  ¶®dNĄÄpªy¼³BE®lGŭCǶwêżĔÂepÍÀQƞpC¼ŲÈ­AÎô¶RäQ^Øu¬°_Èôc´¹ò¨PÎ¢hlĎ¦´ĦÆ´sâÇŲPnÊD^¯°Upv}®BPÌªjǬxSöwlfòªvqĸ|`H­viļndĜ­Ćhňem·FyÞqóSį¯³X_ĞçêtryvL¤§z¦c¦¥jnŞklD¤øz½ĜàĂŧMÅ|áƆàÊcðÂFÜáŢ¥\\\\\\\\ºİøÒÐJĴîD¦zK²ǏÎEh~CD­hMn^ÌöÄ©ČZÀaüfɭyœpį´ěFűk]Ôě¢qlÅĆÙa¶~ÄqêljN¬¼HÊNQ´ê¼VØ¸E^ŃÒyM{JLoÒęæe±Ķygã¯JYÆĭĘëo¥Šo¯hcK«z_prC´ĢÖY¼ v¸¢RÅW³Â§fÇ¸Yi³xR´ďUË`êĿUûuĆBƣöNDH«ĈgÑaB{ÊNF´¬c·Åv}eÇÃGB»If¦HňĕM~[iwjUÁKE¾dĪçWIèÀoÈXòyŞŮÈXâÎŚj|àsRyµÖPr´þ ¸^wþTDŔHr¸RÌmfżÕâCôoxĜƌÆĮÐYtâŦÔ@]ÈǮƒ\\\\Ī¼Ä£UsÈ¯LbîƲŚºyhr@ĒÔƀÀ²º\\\\êpJ}ĠvqtĠ@^xÀ£È¨mËÏğ}n¹_¿¢×Y_æpÅA^{½Lu¨GO±Õ½ßM¶wÁĢÛPƢ¼pcĲx|apÌ¬HÐŊSfsðBZ¿©XÏÒKk÷Eû¿SrEFsÕūkóVǥŉiTL¡n{uxţÏhôŝ¬ğōNNJkyPaqÂğ¤K®YxÉƋÁ]āęDqçgOgILu\\\\_gz]W¼~CÔē]bµogpÑ_oď`´³Țkl`IªºÎȄqÔþ»E³ĎSJ»_f·adÇqÇc¥Á_Źw{L^É±ćxU£µ÷xgĉp»ĆqNē`rĘzaĵĚ¡K½ÊBzyäKXqiWPÏÉ¸½řÍcÊG|µƕƣGË÷k°_^ý|_zċBZocmø¯hhcæ\\\\lMFlư£ĜÆyHF¨µêÕ]HAàÓ^it `þßäkĤÎT~Wlÿ¨ÔPzUCNVv [jâôDôď[}z¿msSh¯{jïğl}šĹ[őgK©U·µË@¾m_~q¡f¹ÅË^»f³ø}Q¡ÖË³gÍ±^Ç\\\\ëÃA_¿bWÏ[¶ƛé£F{īZgm@|kHǭƁć¦UĔť×ë}ǝeďºȡȘÏíBÉ£āĘPªĳ¶ŉÿy©nď£G¹¡I±LÉĺÑdĉÜW¥}gÁ{aqÃ¥aıęÏZï`\"],\"encodeOffsets\":[[104636,22969]]},\"properties\":{\"cp\":[102.712251,25.040609],\"name\":\"云南\",\"childNum\":1}},{\"id\":\"540000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ÂhľxŖxÒVºÅâAĪÝȆµę¯Ňa±r_w~uSÕňqOj]ɄQ£ZUDûoY»©M[L¼qãË{VÍçWVi]ë©Ä÷àyƛhÚU°adcQ~Mx¥cc¡ÙaSyFÖk­uRýq¿ÔµQĽ³aG{¿FµëªéĜÿª@¬·K·àariĕĀ«V»ŶĴūgèLǴŇƶaftèBŚ£^âǐÝ®M¦ÁǞÿ¬LhJ¾óƾÆºcxwf]Y´¦|QLn°adĊ\\\\¨oǀÍŎ´ĩĀd`tÊQŞŕ|¨C^©Ĉ¦¦ÎJĊ{ëĎjª²rÐl`¼Ą[t|¦Stè¾PÜK¸dƄı]s¤î_v¹ÎVòŦj£Əsc¬_Ğ´|Ł¦Av¦w`ăaÝaa­¢e¤ı²©ªSªÈMĄwÉØŔì@T¤Ę\\\\õª@þo´­xA sÂtŎKzó´ÇĊµ¢r^nĊ­Æ¬×üG¢³ {âĊ]G~bÀgVjzlhǶfOfdªB]pjTOtĊn¤}®¦Č¥d¢¼»ddY¼t¢eȤJ¤}Ǿ¡°§¤AÐlc@ĝsªćļđAçwxUuzEÖġ~AN¹ÄÅȀŻ¦¿ģŁéì±Hãd«g[Ø¼ēÀcīľġ¬cJµÐʥVȝ¸ßS¹ý±ğkƁ¼ą^ɛ¤Ûÿb[}¬ōõÃ]ËNm®g@Bg}ÍF±ǐyL¥íCIĳÏ÷Ñį[¹¦[âšEÛïÁÉdƅß{âNÆāŨß¾ě÷yC£k­´ÓH@Â¹TZ¥¢į·ÌAÐ§®Zcv½Z­¹|ÅWZqgW|ieZÅYVÓqdqbc²R@c¥Rã»GeeƃīQ}J[ÒK¬Ə|oėjġĠÑN¡ð¯EBčnwôɍėª²CλŹġǝʅįĭạ̃ūȹ]ΓͧgšsgȽóϧµǛęgſ¶ҍć`ĘąŌJÞä¤rÅň¥ÖÁUětęuůÞiĊÄÀ\\\\Æs¦ÓRb|Â^řÌkÄŷ¶½÷f±iMÝ@ĥ°G¬ÃM¥n£Øąğ¯ß§aëbéüÑOčk£{\\\\eµª×MÉfm«Ƒ{Å×Gŏǩãy³©WÑăû··Qòı}¯ãIéÕÂZ¨īès¶ZÈsæĔTŘvgÌsN@îá¾ó@ÙwU±ÉTå»£TđWxq¹Zobs[×¯cĩvėŧ³BM|¹kªħ¥TzNYnÝßpęrñĠĉRS~½ěVVµõ«M££µBĉ¥áºae~³AuĐh`Ü³ç@BÛïĿa©|z²Ý¼D£àč²ŸIûI āóK¥}rÝ_Á´éMaň¨~ªSĈ½½KÙóĿeƃÆB·¬ën×W|Uº}LJrƳlŒµ`bÔ`QÐÓ@s¬ñIÍ@ûws¡åQÑßÁ`ŋĴ{ĪTÚÅTSÄ³Yo|Ç[Ç¾µMW¢ĭiÕØ¿@MhpÕ]jéò¿OƇĆƇpêĉâlØwěsǩĵ¸cbU¹ř¨WavquSMzeo_^gsÏ·¥Ó@~¯¿RiīB\\\\qTGªÇĜçPoÿfñòą¦óQīÈáPābß{ZŗĸIæÅhnszÁCËìñÏ·ąĚÝUm®ó­L·ăUÈíoù´Êj°ŁŤ_uµ^°ìÇ@tĶĒ¡ÆM³Ģ«İĨÅ®ğRāðggheÆ¢zÊ©Ô\\\\°ÝĎz~ź¤PnMĪÖB£kné§żćĆKĒ°¼L¶èâz¨u¦¥LDĘz¬ýÎmĘd¾ßFzhg²Fy¦ĝ¤ċņbÎ@yĄæm°NĮZRÖíJ²öLĸÒ¨Y®ƌÐVàtt_ÚÂyĠz]ŢhzĎ{ÂĢXc|ÐqfO¢¤ögÌHNPKŖUú´xx[xvĐCûĀìÖT¬¸^}Ìsòd´_KgžLĴÀBon|H@Êx¦BpŰŌ¿fµƌA¾zǈRx¶FkĄźRzŀ~¶[´HnªVƞuĒ­È¨ƎcƽÌm¸ÁÈM¦x͊ëÀxǆBú^´W£dkɾĬpw˂ØɦļĬIŚÊnŔa¸~J°îlɌxĤÊÈðhÌ®gT´øàCÀ^ªerrƘd¢İP|Ė ŸWªĦ^¶´ÂLaT±üWƜǀRÂŶUńĖ[QhlLüAÜ\\\\qRĄ©\"],\"encodeOffsets\":[[90849,37210]]},\"properties\":{\"cp\":[91.132212,29.660361],\"name\":\"西藏\",\"childNum\":1}},{\"id\":\"610000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@p¢ȮµûGĦ}Ħðǚ¶òƄjɂz°{ºØkÈęâ¦jªBg\\\\ċ°s¬]jú EȌǆ¬stRÆdĠİwÜ¸ôW¾ƮłÒ_{Ìû¼jº¹¢GǪÒ¯ĘZ`ºŊecņą~BÂgzpâēòYǠȰÌTÎ¨ÂW|fcă§uF@N¢XLRMº[ğȣſï|¥Jkc`sŉǷY¹W@µ÷Kãï³ÛIcñ·VȋÚÒķø©þ¥yÓğęmWµÎumZyOŅƟĥÓ~sÑL¤µaÅY¦ocyZ{y c]{Ta©`U_Ěē£ωÊƍKùK¶ȱÝƷ§{û»ÅÁȹÍéuĳ|¹cÑdìUYOuFÕÈYvÁCqÓTǢí§·S¹NgV¬ë÷Át°DØ¯C´ŉƒópģ}ċcEËFéGU¥×K§­¶³BČ}C¿åċ`wġB·¤őcƭ²ő[Å^axwQOÿEËßŚĤNĔwƇÄńwĪ­o[_KÓª³ÙnKÇěÿ]ďă_d©·©Ýŏ°Ù®g]±ßå¬÷m\\\\iaǑkěX{¢|ZKlçhLtŇîŵœè[É@ƉĄEtƇÏ³­ħZ«mJ×¾MtÝĦ£IwÄå\\\\Õ{OwĬ©LÙ³ÙgBƕŀrÌĢŭO¥lãyC§HÍ£ßEñX¡­°ÙCgpťzb`wIvA|§hoĕ@E±iYd¥OĻ¹S|}F@¾oAO²{tfÜ¢FǂÒW²°BĤh^Wx{@¬­F¸¡ķn£P|ªĴ@^ĠĈæbÔc¶lYi^MicĎ°Â[ävï¶gv@ÀĬ·lJ¸sn|¼u~a]ÆÈtŌºJpþ£KKf~¦UbyäIĺãnÔ¿^­ŵMThĠÜ¤ko¼Ŏìąǜh`[tRd²Ĳ_XPrɲlXiL§à¹H°Ȧqº®QCbAŌJ¸ĕÚ³ĺ§ `d¨YjiZvRĺ±öVKkjGȊÄePĞZmļKÀ[`ösìhïÎoĬdtKÞ{¬èÒÒBÔpĲÇĬJŊ¦±J«Y§@·pHµàåVKepWftsAÅqC·¬ko«pHÆuK@oHĆÛķhxenS³àǍrqƶRbzy¸ËÐl¼EºpĤ¼x¼½~Ğà@ÚüdK^mÌSj\"],\"encodeOffsets\":[[110234,38774]]},\"properties\":{\"cp\":[108.948024,34.263161],\"name\":\"陕西\",\"childNum\":1}},{\"id\":\"620000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@VuUv\"],[\"@@ũEĠtt~nkh`Q¦ÅÄÜdwAb×ĠąJ¤DüègĺqBqj°lI¡ĨÒ¤úSHbjÎB°aZ¢KJO[|A£Dx}NĂ¬HUnrk kp¼Y kMJn[aGáÚÏ[½rc}aQxOgsPMnUsncZsKúvAtÞġ£®ĀYKdnFw¢JE°Latf`¼h¬we|Æbj}GA·~W`¢MC¤tL©Ĳ°qdfObÞĬ¹ttu`^ZúE`[@Æsîz®¡CƳƜG²R¢RmfwĸgÜą G@pzJM½mhVy¸uÈÔO±¨{LfæU¶ßGĂq\\\\ª¬²I¥IŉÈīoıÓÑAçÑ|«LÝcspīðÍgtë_õ\\\\ĉñLYnĝgRǡÁiHLlõUĹ²uQjYi§Z_c¨´ĹĖÙ·ŋIaBD­R¹ȥr¯GºßK¨jWkɱOqWĳ\\\\a­Q\\\\sg_ĆǛōëp»£lğÛgSŶN®À]ÓämĹãJaz¥V}Le¤Lýo¹IsŋÅÇ^bz³tmEÁ´a¹cčecÇNĊãÁ\\\\č¯dNj]jZµkÓdaćå]ğĳ@ ©O{¤ĸm¢E·®«|@Xwg]Aģ±¯XǁÑǳªcwQÚŝñsÕ³ÛV_ý¥\\\\ů¥©¾÷w©WÕÊĩhÿÖÁRo¸V¬âDb¨hûxÊ×ǌ~Zâg|XÁnßYoº§ZÅŘv[ĭÖʃuďxcVbnUSfB¯³_TzºÎO©çMÑ~M³]µ^püµÄY~y@X~¤Z³[Èōl@®Å¼£QK·Di¡ByÿQ_´D¥hŗy^ĭÁZ]cIzýah¹MĪğPs{ò²Vw¹t³ŜË[Ñ}X\\\\gsF£sPAgěp×ëfYHāďÖqēŭOÏëdLü\\\\it^c®RÊº¶¢H°mrY£B¹čIoľu¶uI]vģSQ{UŻÅ}QÂ|Ì°ƅ¤ĩŪU ęĄÌZÒ\\\\v²PĔ»ƢNHĂyAmƂwVm`]ÈbH`Ì¢²ILvĜH®¤Dlt_¢JJÄämèÔDëþgºƫaʎÌrêYi~ Îİ¤NpÀA¾Ĕ¼bð÷®üszMzÖĖQdȨýv§Tè|ªHÃ¾a¸|Ð ƒwKĢx¦ivr^ÿ ¸l öæfƟĴ·PJv}n\\\\h¹¶v·À|\\\\ƁĚN´ĜçèÁz]ġ¤²¨QÒŨTIlªťØ}¼˗ƦvÄùØEÂ«FïËIqōTvāÜŏíÛßÛVj³âwGăÂíNOPìyV³ŉĖýZso§HÑiYw[ß\\\\X¦¥c]ÔƩÜ·«jÐqvÁ¦m^ċ±R¦΋ƈťĚgÀ»IïĨʗƮ°ƝĻþÍAƉſ±tÍEÕÞāNUÍ¡\\\\ſčåÒʻĘm ƭÌŹöʥëQ¤µ­ÇcƕªoIýIÉ_mkl³ăƓ¦j¡YzŇi}Msßõīʋ }ÁVm_[n}eı­Uĥ¼ªI{Î§DÓƻėojqYhĹT©oūĶ£]ďxĩǑMĝq`B´ƃ˺Чç~²ņj@¥@đ´ί}ĥtPńÇ¾V¬ufÓÉCtÓ̻¹£G³]ƖƾŎĪŪĘ̖¨ʈĢƂlɘ۪üºňUðǜȢƢż̌ȦǼĤŊɲĖÂ­Kq´ï¦ºĒǲņɾªǀÞĈĂD½ĄĎÌŗĞrôñnN¼â¾ʄľԆ|Ǆ֦ज़ȗǉ̘̭ɺƅêgV̍ʆĠ·ÌĊv|ýĖÕWĊǎÞ´õ¼cÒÒBĢ͢UĜð͒s¨ňƃLĉÕÝ@ɛƯ÷¿Ľ­ĹeȏĳëCȚDŲyê×Ŗyò¯ļcÂßYtÁƤyAã˾J@ǝrý@¤rz¸oP¹ɐÚyáHĀ[JwcVeȴÏ»ÈĖ}ƒŰŐèȭǢόĀƪÈŶë;Ñ̆ȤМľĮEŔĹŊũ~ËUă{ĻƹɁύȩþĽvĽƓÉ@ēĽɲßǐƫʾǗĒpäWÐxnsÀ^ƆwW©¦cÅ¡Ji§vúF¶¨c~c¼īeXǚ\\\\đ¾JwÀďksãAfÕ¦L}waoZD½Ml«]eÒÅaÉ²áo½FõÛ]ĻÒ¡wYR£¢rvÓ®y®LFLzĈôe]gx}|KK}xklL]c¦£fRtív¦PĤoH{tK\"]],\"encodeOffsets\":[[[108619,36299]],[[108589,36341]]]},\"properties\":{\"cp\":[103.823557,36.058039],\"name\":\"甘肃\",\"childNum\":2}},{\"id\":\"630000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@InJm\"],[\"@@CÆ½OŃĦsΰ~Ē³¦@@Ņi±è}ШƄ˹A³r_ĞǒNĪĐw¤^ŬĵªpĺSZgrpiƼĘÔ¨C|ÍJ©Ħ»®VĲ~f\\\\m `UnÂ~ʌĬàöNt~ňjy¢ZiƔ¥Ąk´nl`JÊJþ©pdƖ®È£¶ìRʦźõƮËnʼėæÑƀĎ[¢VÎĂMÖÝÎF²sƊƀÎBļýƞ¯ʘƭðħ¼Jh¿ŦęΌƇ¥²Q]Č¥nuÂÏri¸¬ƪÛ^Ó¦d¥[Wàx\\\\ZjÒ¨GtpþYŊĕ´zUOëPîMĄÁxH´áiÜUàîÜŐĂÛSuŎrJðÌ¬EFÁú×uÃÎkrĒ{V}İ«O_ÌËĬ©ÓŧSRÑ±§Ģ£^ÂyèçěM³Ƃę{[¸¿uºµ[gt£¸OƤĿéYõ·kĀq]juw¥DĩƍõÇPéÄ½G©ã¤GuȧþRcÕĕNyyût­øï»a½ē¿BMoį£Íj}éZËqbʍƬh¹ìÿÓAçãnIÃ¡I`ks£CG­ěUy×Cy@¶ʡÊBnāzGơMē¼±O÷õJËĚăVĪũƆ£¯{ËL½ÌzżVR|ĠTbuvJvµhĻĖHAëáa­OÇðñęNwœľ·LmI±íĠĩPÉ×®ÿscB³±JKßĊ«`ađ»·QAmOVţéÿ¤¹SQt]]Çx±¯A@ĉĳ¢Óļ©l¶ÅÛrŕspãRk~¦ª]Į­´FRåd­ČsCqđéFn¿ÅƃmÉx{W©ºƝºįkÕƂƑ¸wWūÐ©ÈF£\\\\tÈ¥ÄRÈýÌJ lGr^×äùyÞ³fjc¨£ÂZ|ǓMĝÏ@ëÜőRĝ÷¡{aïȷPu°ËXÙ{©TmĠ}Y³­ÞIňµç½©C¡į÷¯B»|St»]vųs»}MÓ ÿʪƟǭA¡fs»PY¼c¡»¦cċ­¥£~msĉPSi^o©AecPeǵkgyUi¿h}aHĉ^|á´¡HØûÅ«ĉ®]m¡qĉ¶³ÈyôōLÁstB®wn±ă¥HSòė£Së@×œÊăxÇN©©T±ª£Ĳ¡fb®Þbb_Ą¥xu¥B{łĝ³«`dƐt¤ťiñÍUuºí`£^tƃĲc·ÛLO½sç¥Ts{ă\\\\_»kÏ±q©čiìĉ|ÍI¥ć¥]ª§D{ŝŖÉR_sÿc³ĪōƿÎ§p[ĉc¯bKmR¥{³Ze^wx¹dƽÅ½ôIg §Mĕ ƹĴ¿ǣÜÍ]Ý]snåA{eƭ`ǻŊĿ\\\\ĳŬűYÂÿ¬jĖqßb¸L«¸©@ěĀ©ê¶ìÀEH|´bRľÓ¶rÀQþvl®ÕETzÜdb hw¤{LRdcb¯ÙVgƜßzÃôì®^jUèXÎ|UäÌ»rK\\\\ªN¼pZCüVY¤ɃRi^rPŇTÖ}|br°qňbĚ°ªiƶGQ¾²x¦PmlŜ[Ĥ¡ΞsĦÔÏâ\\\\ªÚŒU\\\\f¢N²§x|¤§xĔsZPòʛ²SÐqF`ªVÞŜĶƨVZÌL`¢dŐIqr\\\\oäõFÎ·¤»Ŷ×h¹]ClÙ\\\\¦ďÌį¬řtTӺƙgQÇÓHţĒ´ÃbEÄlbʔC|CŮkƮ[ʼ¬ň´KŮÈΰÌĪ¶ƶlðļATUvdTGº̼ÔsÊDÔveOg\"]],\"encodeOffsets\":[[[105308,37219]],[[95370,40081]]]},\"properties\":{\"cp\":[101.778916,36.623178],\"name\":\"青海\",\"childNum\":2}},{\"id\":\"640000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@KëÀęĞ«Oęȿȕı]ŉ¡åįÕÔ«ǴõƪĚQÐZhv K°öqÀÑS[ÃÖHƖčËnL]ûcÙß@ĝ¾}w»»oģF¹»kÌÏ·{zP§B­¢íyÅt@@á]Yv_ssģ¼ißĻL¾ġsKD£¡N_X¸}B~HaiÅf{«x»ge_bsKF¯¡IxmELcÿZ¤­ĢÝsuBLùtYdmVtNmtOPhRw~bd¾qÐ\\\\âÙH\\\\bImlNZ»loqlVmGā§~QCw¤{A\\\\PKNY¯bFkC¥sks_Ã\\\\ă«¢ħkJi¯rrAhĹûç£CUĕĊ_ÔBixÅÙĄnªÑaM~ħpOu¥sîeQ¥¤^dkKwlL~{L~hw^ófćKyE­K­zuÔ¡qQ¤xZÑ¢^ļöÜ¾Ep±âbÊÑÆ^fk¬NC¾YpxbK~¥eÖäBlt¿Đx½I[ĒǙWf»Ĭ}d§dµùEuj¨IÆ¢¥dXªƅx¿]mtÏwßRĶX¢͎vÆzƂZò®ǢÌʆCrâºMÞzÆMÒÊÓŊZÄ¾r°Î®Ȉmª²ĈUªĚîøºĮ¦ÌĘk^FłĬhĚiĀĖ¾iİbjÕ\"],[\"@@mfwěwMrŢªv@G\"]],\"encodeOffsets\":[[[109366,40242]],[[108600,36303]]]},\"properties\":{\"cp\":[106.278179,38.46637],\"name\":\"宁夏\",\"childNum\":2}},{\"id\":\"650000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@QØĔ²X¨~ǘBºjʐßØvKƔX¨vĊOÃ·¢i@~cĝe_«E}QxgɪëÏÃ@sÅyXoŖ{ô«ŸuXêÎf`C¹ÂÿÐGĮÕĞXŪōŸMźÈƺQèĽôe|¿ƸJR¤ĘEjcUóº¯Ĩ_ŘÁMª÷Ð¥OéÈ¿ÖğǤǷÂFÒzÉx[]­Ĥĝœ¦EP}ûƥé¿İƷTėƫœŕƅƱB»Đ±ēO¦E}`cȺrĦáŖuÒª«ĲπdƺÏØZƴwʄ¤ĖGĐǂZĶèH¶}ÚZצʥĪï|ÇĦMŔ»İĝǈì¥Βba­¯¥ǕǚkĆŵĦɑĺƯxūД̵nơʃĽá½M»òmqóŘĝčË¾ăCćāƿÝɽ©ǱŅ¹đ¥³ðLrÁ®ɱĕģŉǻ̋ȥơŻǛȡVï¹Ň۩ûkɗġƁ§ʇė̕ĩũƽō^ƕUv£ƁQïƵkŏ½ΉÃŭÇ³LŇʻ«ƭ\\\\lŭD{ʓDkaFÃÄa³ŤđÔGRÈƚhSӹŚsİ«ĐË[¥ÚDkº^Øg¼ŵ¸£EÍöůŉT¡c_ËKYƧUśĵÝU_©rETÏʜ±OñtYwē¨{£¨uM³x½şL©Ùá[ÓÐĥ Νtģ¢\\\\śnkOw¥±T»ƷFɯàĩÞáB¹ÆÑUwŕĽw[mG½Èå~Æ÷QyěCFmĭZīŵVÁƿQƛûXS²b½KÏ½ĉS©ŷXĕ{ĕK·¥Ɨcqq©f¿]ßDõU³h­gËÇïģÉɋwk¯í}I·œbmÉřīJɥĻˁ×xoɹīlc¤³Xù]ǅA¿w͉ì¥wÇN·ÂËnƾƍdÇ§đ®ƝvUm©³G\\\\}µĿQyŹlăµEwǇQ½yƋBe¶ŋÀůo¥AÉw@{Gpm¿AĳŽKLh³`ñcËtW±»ÕSëüÿďDu\\\\wwwù³VLŕOMËGh£õP¡erÏd{ġWÁč|yšg^ğyÁzÙs`s|ÉåªÇ}m¢Ń¨`x¥ù^}Ì¥H«YªƅAÐ¹n~ź¯f¤áÀzgÇDIÔ´AňĀÒ¶ûEYospõD[{ù°]uJqU|Soċxţ[õÔĥkŋÞŭZËºóYËüċrw ÞkrťË¿XGÉbřaDü·Ē÷AÃª[ÄäIÂ®BÕĐÞ_¢āĠpÛÄȉĖġDKwbmÄNôfƫVÉviǳHQµâFù­Âœ³¦{YGd¢ĚÜO {Ö¦ÞÍÀP^bƾl[vt×ĈÍEË¨¡Đ~´î¸ùÎhuè`¸HÕŔVºwĠââWò@{ÙNÝ´ə²ȕn{¿¥{l÷eé^eďXj©î\\\\ªÑòÜìc\\\\üqÕ[Č¡xoÂċªbØ­ø|¶ȴZdÆÂońéG\\\\¼C°ÌÆn´nxÊOĨŪƴĸ¢¸òTxÊǪMīĞÖŲÃɎOvʦƢ~FRěò¿ġ~åŊúN¸qĘ[Ĕ¶ÂćnÒPĒÜvúĀÊbÖ{Äî¸~Ŕünp¤ÂH¾ĄYÒ©ÊfºmÔĘcDoĬMŬS¤s²ʘÚžȂVŦ èW°ªB|ĲXŔþÈJĦÆæFĚêYĂªĂ]øªŖNÞüAfɨJ¯ÎrDDĤ`mz\\\\§~D¬{vJÂ«lµĂb¤pŌŰNĄ¨ĊXW|ų ¿¾ɄĦƐMTòP÷fØĶK¢ȝ˔Sô¹òEð­`Ɩ½ǒÂň×äı§ĤƝ§C~¡hlåǺŦŞkâ~}FøàĲaĞfƠ¥Ŕd®U¸źXv¢aƆúŪtŠųƠjdƺƺÅìnrh\\\\ĺ¯äɝĦ]èpĄ¦´LƞĬ´ƤǬ˼Ēɸ¤rºǼ²¨zÌPðŀbþ¹ļD¢¹\\\\ĜÑŚ¶ZƄ³àjĨoâȴLÊȮĐ­ĚăÀêZǚŐ¤qȂ\\\\L¢ŌİfÆs|zºeªÙæ§΢{Ā´ƐÚ¬¨Ĵà²łhʺKÞºÖTiƢ¾ªì°`öøu®Ê¾ãØ\"],\"encodeOffsets\":[[88824,50096]]},\"properties\":{\"cp\":[87.617733,43.792818],\"name\":\"新疆\",\"childNum\":1}},{\"id\":\"110000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ĽOÁûtŷmiÍt_H»Ĩ±d`¹­{bwYr³S]§§o¹qGtm_SŧoaFLgQN_dV@Zom_ć\\\\ßcÂ±x¯oœRcfe£o§ËgToÛJíĔóu|wP¤XnO¢ÉŦ¯rNÄā¤zâŖÈRpŢZÚ{GrFt¦Òx§ø¹RóäV¤XdżâºWbwŚ¨Ud®bêņ¾jnŎGŃŶnzÚSeîĜZczî¾i]ÍQaúÍÔiþĩȨWĢü|Ėu[qb[swP@ÅğP¿{\\\\¥A¨ÏÑ¨j¯X\\\\¯MKpA³[Hīu}}\"],\"encodeOffsets\":[[120023,41045]]},\"properties\":{\"cp\":[116.405285,39.904989],\"name\":\"北京\",\"childNum\":1}},{\"id\":\"120000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@ŬgX§Ü«E¶FÌ¬O_ïlÁgz±AXeµÄĵ{¶]gitgIj·¥îakS¨ÐƎk}ĕ{gBqGf{¿aU^fIư³õ{YıëNĿk©ïËZŏR§òoY×Ógcĥs¡bġ«@dekąI[nlPqCnp{ō³°`{PNdƗqSÄĻNNâyj]äÒD ĬH°Æ]~¡HO¾X}ÐxgpgWrDGpù^LrzWxZ^¨´T\\\\|~@IzbĤjeĊªz£®ĔvěLmV¾Ô_ÈNW~zbĬvG²ZmDM~~\"],\"encodeOffsets\":[[120237,41215]]},\"properties\":{\"cp\":[117.190182,39.125596],\"name\":\"天津\",\"childNum\":1}},{\"id\":\"310000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@ɧư¬EpƸÁxc\"],[\"@@©ª\"],[\"@@MA\"],[\"@@QpİE§ÉC¾\"],[\"@@bŝÕÕEȣÚƥêImɇǦèÜĠÚÃƌÃ͎ó\"],[\"@@ǜûȬɋŭ×^sYɍDŋŽąñCG²«ªč@h_p¯A{oloY¬j@Ĳ`gQÚhr|ǀ^MĲvtbe´R¯Ô¬¨Yô¤r]ìƬį\"]],\"encodeOffsets\":[[[124702,32062]],[[124547,32200]],[[124808,31991]],[[124726,32110]],[[124903,32376]],[[124438,32149]]]},\"properties\":{\"cp\":[121.472644,31.231706],\"name\":\"上海\",\"childNum\":6}},{\"id\":\"500000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@vjG~nGŘŬĶȂƀƾ¹¸ØÎezĆT¸}êÐqHðqĖä¥^CÆIj²p\\\\_ æüY|[YxƊæu°xb®Űb@~¢NQt°¶Sæ Ê~rǉĔëĚ¢~uf`faĔJåĊnÖ]jƎćÊ@£¾a®£Ű{ŶĕFègLk{Y|¡ĜWƔtƬJÑxq±ĢN´òKLÈÃ¼D|s`ŋć]Ã`đMûƱ½~Y°ħ`ƏíW½eI½{aOIrÏ¡ĕŇapµÜƅġ^ÖÛbÙŽŏml½SêqDu[RãË»ÿw`»y¸_ĺę}÷`M¯ċfCVµqŉ÷Zgg`d½pDOÎCn^uf²ènh¼WtƏxRGg¦pVFI±G^Ic´ecGĹÞ½sëĬhxW}KÓe­XsbkF¦LØgTkïƵNï¶}Gyw\\\\oñ¡nmĈzj@Óc£»Wă¹Ój_m»¹·~MvÛaq»­ê\\\\ÂoVnÓØÍ²«bq¿efE Ĝ^Q~ Évýş¤²ĮpEİ}zcĺL½¿gÅ¡ýE¡ya£³t\\\\¨\\\\vú»¼§·Ñr_oÒý¥u_n»_At©ÞÅ±ā§IVeëY}{VPÀFA¨ąB}q@|Ou\\\\FmQFÝMwå}]|FmÏCawu_p¯sfÙgYDHl`{QEfNysB¦zG¸rHeN\\\\CvEsÐùÜ_·ÖĉsaQ¯}_UxÃđqNH¬Äd^ÝŰR¬ã°wećJE·vÝ·HgéFXjÉê`|ypxkAwWĐpb¥eOsmzwqChóUQl¥F^lafanòsrEvfQdÁUVfÎvÜ^eftET¬ôA\\\\¢sJnQTjPØxøK|nBzĞ»LYFDxÓvr[ehľvN¢o¾NiÂxGpâ¬zbfZo~hGi]öF||NbtOMn eA±tPTLjpYQ|SHYĀxinzDJÌg¢và¥Pg_ÇzIIII£®S¬ØsÎ¼£N\"],[\"@@ifjN@s\"]],\"encodeOffsets\":[[[109628,30765]],[[111725,31320]]]},\"properties\":{\"cp\":[106.504962,29.533155],\"name\":\"重庆\",\"childNum\":2}},{\"id\":\"810000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[\"@@AlBk\"],[\"@@mn\"],[\"@@EpFo\"],[\"@@ea¢pl¸Eõ¹hj[]ÔCÎ@lj¡uBX´AI¹[yDU]W`çwZkmcMpÅv}IoJlcafŃK°ä¬XJmÐ đhI®æÔtSHnEÒrÈc\"],[\"@@rMUwAS®e\"]],\"encodeOffsets\":[[[117111,23002]],[[117072,22876]],[[117045,22887]],[[116975,23082]],[[116882,22747]]]},\"properties\":{\"cp\":[114.173355,22.320048],\"name\":\"香港\",\"childNum\":5}},{\"id\":\"820000\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[\"@@kÊd°å§s\"],\"encodeOffsets\":[[116279,22639]]},\"properties\":{\"cp\":[113.54909,22.198951],\"name\":\"澳门\",\"childNum\":1}}],\"UTF8Encoding\":true});\n}));","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./heat-map.vue?vue&type=style&index=0&id=294875f9&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./heat-map.vue?vue&type=style&index=0&id=294875f9&scoped=true&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{ref:\"mapchart\",staticClass:\"right map\",attrs:{\"id\":\"myChart\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"container\">\r\n    <!-- <div class=\"tooltips\" :style=\"{'left': toolTipsLeft, 'top': toolTipsTop}\" v-show=\"showTooltips\" ref=\"tooltips\" @click=\"showTooltips = false\">\r\n      <div>年份：{{nowYear}}</div>\r\n      <div>省份：{{nowProvince}}</div>\r\n      <div>值：{{nowVal}}</div>\r\n    </div> -->\r\n    <div class=\"right map\" ref=\"mapchart\" id=\"myChart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入基本模板\r\nvar echarts = require('echarts')\r\nimport \"echarts/map/js/china.js\";\r\nimport \"echarts/lib/component/title\";\r\nimport \"echarts/lib/component/legend\";\r\nimport \"echarts/lib/chart/heatmap\";\r\nimport \"echarts/lib/component/toolbox\";\r\nimport \"echarts/lib/component/tooltip\";\r\nimport {GRID} from \"@/jslib/areaAddress\";\r\nimport {mapState} from 'vuex'\r\nconst STOREDATA = ['PM2d5', 'NO2', 'PM10', 'O3', 'SO2', 'CO']\r\nconst TOOLTIPS = ['PM2.5', 'NO2', 'PM10', 'O3', 'SO2', 'CO']\r\nconst YEARLIST = [2013, 2014, 2015, 2016, 2017, 2018]\r\nexport default {\r\n  data() {\r\n    return {\r\n      showTooltips: false,\r\n      nowYear: 2015, // 气泡提示\r\n      nowProvince: '广东省', // 气泡提示\r\n      nowVal: 0, // 气泡提示\r\n      toolTipsLeft: 0,\r\n      toolTipsTop: 0\r\n    };\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.drawMap();\r\n      this.$emit('ctrlLoading', false)\r\n    })\r\n  },\r\n  methods: {\r\n    returnChartNode() {\r\n      return this.$refs.mapchart;\r\n    },\r\n    isIE() {\r\n      if (!!window.ActiveXObject || \"ActiveXObject\" in window){\r\n          return true;\r\n      }else{\r\n          return false;\r\n      }\r\n    },\r\n    // 查找城市、省份坐标\r\n    // findGrid(province, city) {\r\n    //   if (!city) {\r\n    //     let grid = []\r\n    //     for (let index in GRID) {\r\n    //       if (GRID[index].name == province) {\r\n    //         grid.push(GRID[index].log);\r\n    //         grid.push(GRID[index].lat);\r\n    //         break;\r\n    //       }\r\n    //     }\r\n    //     return grid;\r\n    //   } else {\r\n    //     let grid = []\r\n    //     outside:\r\n    //     for (let index in GRID) {\r\n    //       if (GRID[index].name == province) {\r\n    //         let citylist = GRID[index].children\r\n    //         for (let cityIndex in citylist) {\r\n    //           if(citylist[cityIndex].name == city) {\r\n    //             grid.push(citylist[cityIndex].log);\r\n    //             grid.push(citylist[cityIndex].lat);\r\n    //             break outside;\r\n    //             break;\r\n    //           }\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //     return grid;\r\n    //   }\r\n    // },\r\n    // 计算省份的数据\r\n    getProvinceData(year, type) {\r\n      // 选项的type值如下\r\n      // \"PM 2.5\"：type: 0\r\n      // \"NO₂\"：type: 1\r\n      // \"PM 10\"：type: 2\r\n      // \"O₃\"：type: 3\r\n      // \"SO₂\"：type: 4\r\n      // \"CO\"：type: 5\r\n      let data = [];\r\n      GRID.forEach(province => {\r\n        let proVal = {\r\n          name: province.name,\r\n          year: year\r\n        };\r\n        let val = 0;\r\n        this[STOREDATA[type]].forEach(city => {\r\n          if (city['省份'] == province.name) {\r\n            if(!isNaN(city[year])){\r\n              val += Number(city[year])\r\n            }\r\n          }\r\n        });\r\n        if (val > 0) {\r\n          // let ValueArray = [Number(province.log), Number(province.lat), val];\r\n          proVal.value = val;\r\n          data.push(proVal);\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    getCurrentProvinceData(year, type, name) {\r\n      // 选项的type值如下\r\n      // \"PM 2.5\"：type: 0\r\n      // \"NO₂\"：type: 1\r\n      // \"PM 10\"：type: 2\r\n      // \"O₃\"：type: 3\r\n      // \"SO₂\"：type: 4\r\n      // \"CO\"：type: 5\r\n      let val = 0;\r\n      this[STOREDATA[type]].forEach(city => {\r\n        if (city['省份'] == name) {\r\n          if(!isNaN(city[year])){\r\n            val += Number(city[year])\r\n          }\r\n        }\r\n      });\r\n      return val > 0 ? val : 0\r\n    },\r\n    // 计算城市数据\r\n    getCityData(year, type) {\r\n      let data = [];\r\n      this[STOREDATA[type]].forEach(city => {\r\n        let cityVal = {\r\n          name: city[\"城市\"],\r\n          year: year\r\n        };\r\n        let val = (isNaN(city[year]) || city[year] === \"\") ? 0 : city[year]\r\n        if (val > 0) {\r\n          let ValueArray = [Number(city.LNGB), Number(city.LATB), val];\r\n          cityVal.value = ValueArray\r\n          data.push(cityVal)\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    // 计算重点城市\r\n    getImportantCityData(year, type) {\r\n      let data = [];\r\n      let pollutant = this[STOREDATA[type]];\r\n      this.importantCity.forEach(Icity => {\r\n        for (let index in pollutant) {\r\n          if (pollutant[index]['城市'] == Icity['城市']) {\r\n            let cityVal = {\r\n              name: Icity['城市'],\r\n              year: year\r\n            };\r\n            let val = (isNaN(pollutant[index][year]) || pollutant[index][year] === \"\") ? 0 : pollutant[index][year]\r\n            if (val > 0) {\r\n              let ValueArray = [Number(pollutant[index].LNGB), Number(pollutant[index].LATB), val];\r\n              cityVal.value = ValueArray\r\n              data.push(cityVal);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      })\r\n      return data;\r\n    },\r\n    // 计算几大区域城市数据\r\n    getAreaData(year, type, areaIndex) {\r\n      let data = [];\r\n      let pollutant = this[STOREDATA[type]];\r\n      let areaList = ['占位', '占位', '占位', '京津冀', '长三角', '珠三角'];\r\n      let area = areaList[areaIndex];\r\n      let queryCityList = [];\r\n      \r\n      this.hotCity.forEach(city => {\r\n        if (city['区域'] == area) {\r\n          queryCityList.push(city['城市']);\r\n        }\r\n      })\r\n      // console.log(queryCityList)\r\n      queryCityList.forEach(city => {\r\n        for (let index in pollutant) {\r\n          if (city == pollutant[index]['城市']) {\r\n            let cityVal = {\r\n              name: city,\r\n              year: year\r\n            };\r\n            let val = (isNaN(pollutant[index][year]) || pollutant[index][year] === \"\") ? 0 : pollutant[index][year]\r\n            if (val > 0) {\r\n              let ValueArray = [Number(pollutant[index].LNGB), Number(pollutant[index].LATB), val];\r\n              cityVal.value = ValueArray\r\n              data.push(cityVal);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      })\r\n      return data;\r\n    },\r\n    // 计算政策省份的数据\r\n    ZCgetProvinceData(year, type) {\r\n      let data = [];\r\n      GRID.forEach(province => {\r\n        let proVal = {\r\n          name: province.name,\r\n          year: year\r\n        };\r\n        let val = 0;\r\n        let dataKey = type + year;\r\n        this.cityData.forEach(city => {\r\n          if (city.province == province.name) {\r\n            if(city[dataKey] !== undefined && !isNaN(city[dataKey])){\r\n              val += Number(city[dataKey])\r\n            }\r\n          }\r\n        });\r\n        if (val > 0) {\r\n          // let ValueArray = [Number(province.log), Number(province.lat), val];\r\n          proVal.value = val;\r\n          data.push(proVal);\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    currentZCgetProvinceData(year, type, name) {\r\n      let val = 0;\r\n      let dataKey = type + year;\r\n      this.cityData.forEach(city => {\r\n        if (city.province == name) {\r\n          if(city[dataKey] !== undefined && !isNaN(city[dataKey])){\r\n            val += Number(city[dataKey])\r\n          }\r\n        }\r\n      });\r\n      return val > 0 ? val : 0;\r\n    },\r\n    // 计算政策城市的数据\r\n    ZCCityData(year, type) {\r\n      let data = [];\r\n      this.cityData.forEach(city => {\r\n        let cityVal = {\r\n          name: city.city,\r\n          year: year\r\n        };\r\n        let dataKey = type + year;\r\n        let val = (isNaN(city[dataKey]) || city[dataKey] == undefined) ? 0 : city[dataKey]\r\n        if (val > 0) {\r\n          let ValueArray = [Number(city.LNGB), Number(city.LATB), val];\r\n          cityVal.value = ValueArray\r\n          data.push(cityVal)\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    // 计算政策重点城市\r\n    ZCgetImportantCityData(year, type) {\r\n      let data = [];\r\n      let pollutant = this.cityData;\r\n      let dataKey = type + year;\r\n      this.importantCity.forEach(Icity => {\r\n        for (let index in pollutant) {\r\n          if (pollutant[index].city == Icity['城市']) {\r\n            let cityVal = {\r\n              name: Icity['城市'],\r\n              year: year\r\n            };\r\n            let val = (isNaN(pollutant[index][dataKey]) || pollutant[index][dataKey] == undefined) ? 0 : pollutant[index][dataKey]\r\n            if (val > 0) {\r\n              let ValueArray = [Number(pollutant[index].LNGB), Number(pollutant[index].LATB), val];\r\n              cityVal.value = ValueArray\r\n              data.push(cityVal);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      })\r\n      return data;\r\n    },\r\n    // 计算政策几大区域城市数据\r\n    ZCgetAreaData(year, type, areaIndex) {\r\n      let data = [];\r\n      let pollutant = this.cityData;\r\n      let areaList = ['占位', '占位', '占位', '京津冀', '长三角', '珠三角'];\r\n      let area = areaList[areaIndex];\r\n      let queryCityList = [];\r\n      \r\n      this.hotCity.forEach(city => {\r\n        if (city['区域'] == area) {\r\n          queryCityList.push(city['城市']);\r\n        }\r\n      })\r\n      let dataKey = type + year;\r\n      // console.log(queryCityList)\r\n      queryCityList.forEach(city => {\r\n        for (let index in pollutant) {\r\n          if (city == pollutant[index].city) {\r\n            let cityVal = {\r\n              name: city,\r\n              year: year\r\n            };\r\n            let val = (isNaN(pollutant[index][dataKey]) || pollutant[index][dataKey] == undefined) ? 0 : pollutant[index][dataKey]\r\n            if (val > 0) {\r\n              let ValueArray = [Number(pollutant[index].LNGB), Number(pollutant[index].LATB), val];\r\n              cityVal.value = ValueArray\r\n              data.push(cityVal);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      })\r\n      return data;\r\n    },\r\n    returnMaxVal(year, type, tab) {\r\n      if (tab === 1) {\r\n        let data = this[STOREDATA[type]];\r\n        // let lg = data.length-1;\r\n        // return data[lg][year];\r\n        let arr = [];\r\n        data.forEach(obj => {\r\n          if (obj[year] && !isNaN(obj[year])) {\r\n            arr.push(obj[year])\r\n          }\r\n        })\r\n        return Math.max(...arr) + 10\r\n      } else if (tab === 0) {\r\n        let data = this.cityData;\r\n        // let lg = data.length-1;\r\n        // return data[lg][year];\r\n        let arr = [];\r\n        let dataKey = type + year;\r\n        data.forEach(obj => {\r\n          if (obj[dataKey] && !isNaN(obj[dataKey])) {\r\n            arr.push(obj[dataKey])\r\n          }\r\n        })\r\n        return Math.max(...arr) + 10\r\n      }\r\n    },\r\n    toolsMaxVal(data) {\r\n      let arr = [];\r\n      data.forEach(obj => {\r\n        arr.push(obj.value[2])\r\n      })\r\n      return Math.max(...arr) + 10\r\n      // console.log(arr)\r\n    },\r\n    currentListMax(data) {\r\n      let arr = [];\r\n      data.forEach(obj => {\r\n        arr.push(obj.value)\r\n      })\r\n      return Math.max(...arr) + 10\r\n      // console.log(arr)\r\n    },\r\n    drawMap() {\r\n      let _this = this;\r\n      this.myChart = echarts.init(document.getElementById(\"myChart\"));\r\n      let pollutant = this.chartData.pollutant;\r\n      let area = this.chartData.area;\r\n      let year = YEARLIST[this.chartData.heatYear]\r\n      let defaultData = [];\r\n      let max = 200;\r\n      if (this.chartData.tab === 1) {\r\n        switch (area) {\r\n          case 0: // 省份\r\n            defaultData = this.getProvinceData(year, pollutant)\r\n            // defaultData = this.getCityData(year, pollutant)\r\n            break;\r\n          case 1: // 城市\r\n            defaultData = this.getCityData(year, pollutant)\r\n            break;\r\n          case 2: // 重点城市\r\n            defaultData = this.getImportantCityData(year, pollutant)\r\n            break;\r\n          case 3: // 京津冀\r\n            defaultData = this.getAreaData(year, pollutant, area)\r\n          case 4: // 长三角\r\n            defaultData = this.getAreaData(year, pollutant, area)\r\n          case 5: // 珠三角\r\n            defaultData = this.getAreaData(year, pollutant, area)\r\n            break;\r\n        }\r\n        if (area == 0) {\r\n          max = this.currentListMax(defaultData);\r\n        } else {\r\n          max = this.returnMaxVal(year, pollutant, 1) > 0 ? this.returnMaxVal(year, pollutant, 1) : 200;\r\n        }\r\n      } else if (this.chartData.tab === 0) {\r\n        let policy = this.chartData.policy;\r\n        switch (area) {\r\n          case 0: // 省份\r\n            defaultData = this.ZCgetProvinceData(year, policy)\r\n            // defaultData = this.ZCCityData(year, policy)\r\n            break;\r\n          case 1: // 城市\r\n            defaultData = this.ZCCityData(year, policy)\r\n            break;\r\n          case 2: // 重点城市\r\n            defaultData = this.ZCgetImportantCityData(year, policy)\r\n            break;\r\n          case 3: // 京津冀\r\n            defaultData = this.ZCgetAreaData(year, policy, area)\r\n          case 4: // 长三角\r\n            defaultData = this.ZCgetAreaData(year, policy, area)\r\n          case 5: // 珠三角\r\n            defaultData = this.ZCgetAreaData(year, policy, area)\r\n            break;\r\n        }\r\n        // max = this.returnMaxVal(year, policy, 0) > 0 ? this.returnMaxVal(year, policy, 0) : 200;\r\n        if (area == 0) {\r\n          max = this.currentListMax(defaultData);\r\n        } else {\r\n          max = this.returnMaxVal(year, policy, 0) > 0 ? this.returnMaxVal(year, policy, 0) : 200;\r\n        }\r\n      }\r\n      // let defaultData = this.getProvinceData(YEARLIST[_this.chartData.heatYear], _this.chartData.pollutant)\r\n      // let max = this.toolsMaxVal(defaultData) > 0 ? this.toolsMaxVal(defaultData) : 200;\r\n      \r\n      // let mapType = area === 1 ? \"scatter\" : \"heatmap\"\r\n      let mapType = area === 1 ? \"scatter\" : \"map\"\r\n      let toolbox = this.isIE() ? {\r\n            show: true,\r\n            showTitle: true,\r\n            orient: \"vertical\",\r\n            right: \"20px\",\r\n            top: \"center\",\r\n            feature: {\r\n              saveAsImage: { show: true }\r\n            }\r\n          } : {};\r\n      let defaultOption = {\r\n        toolbox: toolbox,\r\n        visualMap: {\r\n          itemWidth: 40,\r\n          bottom: 50,\r\n          left: 50,\r\n          min: 0,\r\n          max: max,\r\n          calculable: true, //左下角的颜色条开启\r\n          inRange: {\r\n            color: [\"#A5BCF5\", \"#9AFA61\", \"#EBED11\", \"#FE2501\"]\r\n          },\r\n          textStyle: {\r\n            color: \"#333\"\r\n          }\r\n        },\r\n      }\r\n      if (area === 1) {\r\n        defaultOption.tooltip = {\r\n          trigger: \"item\",\r\n          position: \"top\",\r\n          formatter: function(params) {\r\n            let text =\r\n              \"年份:\" +\r\n              params.data.year +\r\n              \"<br>\" +\r\n              \"城市:\" +\r\n              params.name +\r\n              \"<br>\" +\r\n              \"值:\" +\r\n              params.value[2];\r\n            return text;\r\n          }\r\n        };\r\n        defaultOption.geo = {\r\n          map: \"china\",\r\n          roam: true,\r\n          label: {\r\n            normal: {\r\n                show: true,\r\n                textStyle: {\r\n                    color: '#fff'                        //省份字体颜色\r\n                }\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              areaColor: \"#9398a3\",\r\n              borderColor: \"#fff\"\r\n            },\r\n            emphasis: {\r\n              //鼠标hover 地图省份的背景\r\n              areaColor: \"#eee\",\r\n              // areaColor: null,\r\n              shadowOffsetX: 0,\r\n              shadowOffsetY: 0,\r\n              shadowBlur: 20,\r\n              borderWidth: 0,\r\n            }\r\n          }\r\n        };\r\n        defaultOption.series = [\r\n          {\r\n            name: \"中国\",\r\n            type: \"scatter\",\r\n            coordinateSystem: \"geo\",\r\n            data: defaultData,\r\n            itemStyle: {\r\n              normal: {\r\n                borderColor: \"#271b39\",\r\n                borderWidth: 0,\r\n                areaColor: \"#675c74\"\r\n              },\r\n              emphasis: {\r\n                areaColor: \"#d8d5e6\"\r\n              }\r\n            }\r\n          }\r\n        ];\r\n      } else if(area == 0) {\r\n        defaultOption.tooltip = {\r\n          trigger: \"item\",\r\n          position: \"top\",\r\n          confine: true,\r\n          formatter: function(params) {\r\n            let text =\r\n              \"年份:\" +\r\n              params.data.year +\r\n              \"<br>\" +\r\n              \"城市:\" +\r\n              params.name +\r\n              \"<br>\" +\r\n              \"值:\" +\r\n              params.value;\r\n            return text;\r\n          }\r\n        };\r\n        defaultOption.series = [\r\n          {\r\n            name: TOOLTIPS[pollutant],\r\n            type: \"map\",\r\n            mapType: 'china',\r\n            data: defaultData,\r\n          }\r\n        ];\r\n      } else {\r\n        defaultOption.geo = {\r\n          map: \"china\",\r\n          roam: true,\r\n          label: {\r\n            normal: {\r\n                show: true,\r\n                textStyle: {\r\n                    color: '#fff'                        //省份字体颜色\r\n                }\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              areaColor: \"#9398a3\",\r\n              borderColor: \"#fff\"\r\n            },\r\n            emphasis: {\r\n              //鼠标hover 地图省份的背景\r\n              areaColor: \"#eee\",\r\n              shadowOffsetX: 0,\r\n              shadowOffsetY: 0,\r\n              shadowBlur: 20,\r\n              borderWidth: 0,\r\n            }\r\n          }\r\n        },\r\n        defaultOption.series = [\r\n          {\r\n            name: \"中国\",\r\n            type: \"heatmap\",\r\n            coordinateSystem: \"geo\",\r\n            data: defaultData,\r\n            itemStyle: {\r\n              normal: {\r\n                borderColor: \"#271b39\",\r\n                borderWidth: 0,\r\n                areaColor: \"#675c74\"\r\n              },\r\n              emphasis: {\r\n                areaColor: \"#d8d5e6\"\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      this.myChart.setOption(defaultOption);\r\n      setTimeout(function(){\r\n        window.onresize = function(){\r\n        _this.myChart.resize();\r\n        if (_this.showTooltips) _this.showTooltips = false;\r\n        }\r\n      },200)\r\n      // _this.myChart.on('click', function (params) {//点击事件\r\n      //   if (_this.nowProvince == params.name && _this.showTooltips) {\r\n      //     _this.showTooltips = false;\r\n      //     return;\r\n      //   };\r\n      //   if (_this.chartData.area !== 0) return;\r\n      //   _this.nowProvince = params.name;\r\n      //   _this.nowYear = YEARLIST[_this.chartData.heatYear];\r\n      //   if (_this.chartData.tab == 1) {\r\n      //     _this.nowVal = _this.getCurrentProvinceData(_this.nowYear, _this.chartData.pollutant, params.name);\r\n      //   } else if (_this.chartData.tab == 0) {\r\n      //     _this.nowVal = _this.currentZCgetProvinceData(_this.nowYear, _this.chartData.policy, params.name);\r\n      //   }\r\n      //   _this.showTooltips = true;\r\n      //   _this.$nextTick(res => {\r\n      //     _this.toolTipsLeft = params.event.offsetX - (_this.$refs.tooltips.offsetWidth / 2) + 'px';\r\n      //     _this.toolTipsTop = params.event.offsetY - _this.$refs.tooltips.offsetHeight - 10 + 'px';\r\n      //   })\r\n        \r\n      // });\r\n    },\r\n    screen() {\r\n      console.log(\"截地图咯\")\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n        PM2d5: 'PM2d5',\r\n        CO: 'CO',\r\n        NO2: 'NO2',\r\n        PM10: 'PM10',\r\n        SO2: 'SO2',\r\n        O3: 'O3',\r\n        chartData: 'chartData',\r\n        importantCity: 'importantCity',\r\n        hotCity: 'hotCity',\r\n        cityData: 'cityData',\r\n    }),\r\n  },\r\n  watch: {\r\n      chartData: {\r\n        handler(newValue, oldValue) {\r\n          if (this.showTooltips) this.showTooltips = false;\r\n          let year = YEARLIST[newValue.heatYear]\r\n          let data,type,max;\r\n          let option = {\r\n            tooltip: {\r\n              trigger: \"item\",\r\n              position: \"top\",\r\n              confine: true,\r\n              formatter: function(params) {\r\n                let text =\r\n                  \"年份:\" +\r\n                  params.data.year +\r\n                  \"<br>\" +\r\n                  \"城市:\" +\r\n                  params.name +\r\n                  \"<br>\" +\r\n                  \"值:\" +\r\n                  params.value[2];\r\n                  console.log(2222222)\r\n                return text;\r\n              }\r\n            },\r\n            // toolbox: {\r\n            //   show: true,\r\n            //   showTitle: true,\r\n            //   orient: \"vertical\",\r\n            //   right: \"20px\",\r\n            //   top: \"center\",\r\n            //   feature: {\r\n            //     saveAsImage: { show: true }\r\n            //   }\r\n            // },\r\n            visualMap: {\r\n              itemWidth: 40,\r\n              bottom: 50,\r\n              left: 50,\r\n              min: 0,\r\n              max: 200,\r\n              calculable: true, //左下角的颜色条开启\r\n              inRange: {\r\n                // color: [\"#FE2501\", \"#EBED11\", \"#9AFA61\", \"#A5BCF5\"].reverse(),\r\n                color: [\"#A5BCF5\", \"#9AFA61\", \"#EBED11\", \"#FE2501\"]\r\n              },\r\n              textStyle: {\r\n                color: \"#333\"\r\n              }\r\n            },\r\n            geo: {\r\n              map: \"china\",\r\n              roam: true,\r\n              label: {\r\n                normal: {\r\n                    show: true,\r\n                    textStyle: {\r\n                        color: '#fff'                        //省份字体颜色\r\n                    }\r\n                }\r\n              },\r\n              itemStyle: {\r\n                normal: {\r\n                  areaColor: \"#9398a3\",\r\n                  borderColor: \"#fff\"\r\n                },\r\n                emphasis: {\r\n                  //鼠标hover 地图省份的背景\r\n                  areaColor: \"#eee\",\r\n                  shadowOffsetX: 0,\r\n                  shadowOffsetY: 0,\r\n                  shadowBlur: 20,\r\n                  borderWidth: 0,\r\n                }\r\n              }\r\n            },\r\n            series: [\r\n              {\r\n                name: \"中国\",\r\n                type: type,\r\n                coordinateSystem: \"geo\",\r\n                data: [0, 0, 0],\r\n                itemStyle: {\r\n                  normal: {\r\n                    borderColor: \"#271b39\",\r\n                    borderWidth: 0,\r\n                    areaColor: \"#675c74\"\r\n                  },\r\n                  emphasis: {\r\n                    areaColor: \"#d8d5e6\"\r\n                  }\r\n                }\r\n              }\r\n            ]\r\n          }\r\n          if (this.isIE()) option.toolbox = {\r\n            show: true,\r\n            showTitle: true,\r\n            orient: \"vertical\",\r\n            right: \"20px\",\r\n            top: \"center\",\r\n            feature: {\r\n              saveAsImage: { show: true }\r\n            }\r\n          }\r\n          if (newValue.tab === 1) {\r\n            \r\n            switch (newValue.area) {\r\n              case 0: // 省份\r\n                data = this.getProvinceData(year, newValue.pollutant)\r\n                // data = this.getCityData(year, newValue.pollutant)\r\n                max = this.currentListMax(data)\r\n                // option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.tooltip = {\r\n                  trigger: \"item\",\r\n                  position: \"top\",\r\n                  confine: true,\r\n                  formatter: function(params) {\r\n                    let text =\r\n                      \"年份:\" +\r\n                      params.data.year +\r\n                      \"<br>\" +\r\n                      \"城市:\" +\r\n                      params.name +\r\n                      \"<br>\" +\r\n                      \"值:\" +\r\n                      params.value;\r\n                    return text;\r\n                  }\r\n                }\r\n                option.geo = {}\r\n                option.series[0] = {\r\n                  name: TOOLTIPS[newValue.pollutant],\r\n                  type: \"map\",\r\n                  mapType: 'china',\r\n                  data: data,\r\n                }\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 1: // 城市\r\n                data = this.getCityData(year, newValue.pollutant)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.pollutant, 1)\r\n                option.series[0].type = \"scatter\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 2: // 重点城市\r\n                data = this.getImportantCityData(year, newValue.pollutant)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.pollutant, 1)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 3: // 京津冀\r\n                data = this.getAreaData(year, newValue.pollutant, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.pollutant, 1)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n              case 4: // 长三角\r\n                data = this.getAreaData(year, newValue.pollutant, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.pollutant, 1)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n              case 5: // 珠三角\r\n                data = this.getAreaData(year, newValue.pollutant, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.pollutant, 1)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (newValue.tab === 0) {\r\n            switch (newValue.area) {\r\n              case 0: // 省份\r\n                \r\n                data = this.ZCgetProvinceData(year, newValue.policy)\r\n                // data = this.ZCCityData(year, newValue.policy)\r\n                // option.series[0].type = \"heatmap\"\r\n                max = this.currentListMax(data)\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                option.tooltip = {\r\n                  trigger: \"item\",\r\n                  position: \"top\",\r\n                  confine: true,\r\n                  formatter: function(params) {\r\n                    let text =\r\n                      \"年份:\" +\r\n                      params.data.year +\r\n                      \"<br>\" +\r\n                      \"城市:\" +\r\n                      params.name +\r\n                      \"<br>\" +\r\n                      \"值:\" +\r\n                      params.value;\r\n                    return text;\r\n                  }\r\n                }\r\n                option.geo = {}\r\n                option.series[0] = {\r\n                  name: TOOLTIPS[newValue.pollutant],\r\n                  type: \"map\",\r\n                  mapType: 'china',\r\n                  data: data,\r\n                }\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 1: // 城市\r\n                data = this.ZCCityData(year, newValue.policy)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.policy, 0)\r\n                option.series[0].type = \"scatter\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 2: // 重点城市\r\n                data = this.ZCgetImportantCityData(year, newValue.policy)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.policy, 0)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              case 3: // 京津冀\r\n                data = this.ZCgetAreaData(year, newValue.policy, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.policy, 0)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n              case 4: // 长三角\r\n                data = this.ZCgetAreaData(year, newValue.policy, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.policy, 0)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n              case 5: // 珠三角\r\n                data = this.ZCgetAreaData(year, newValue.policy, newValue.area)\r\n                // max = this.toolsMaxVal(data)\r\n                max = this.returnMaxVal(year, newValue.policy, 0)\r\n                option.series[0].type = \"heatmap\"\r\n                option.visualMap.max = max > 0 ? max : 200;\r\n                option.series[0].data = data\r\n                this.myChart.setOption(option)\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n        },\r\n        deep: true\r\n      }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.container {\r\n  position: absolute;\r\n  min-height: 690px;\r\n  top: 60px;\r\n  bottom: 52px;\r\n  left: 275px;\r\n  right: 0;\r\n}\r\n.map {\r\n  width: auto;\r\n  height: 100%;\r\n}\r\n.tooltips{\r\n  position: absolute;\r\n  // left: 238px;\r\n  // top: 303px;\r\n  z-index: 10002;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  border: 1px solid rgb(50, 173, 254);\r\n  border-radius: 8px;\r\n  line-height: 1.5;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  &:after{\r\n    position: absolute;\r\n    bottom: -20px;\r\n    left: calc(50% - 10px);\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-bottom: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid #fff;\r\n    display: block;\r\n    // box-shadow: 0 0 10px rgba(0,0,0,.5);\r\n    content: '';\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./heat-map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./heat-map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./heat-map.vue?vue&type=template&id=294875f9&scoped=true&\"\nimport script from \"./heat-map.vue?vue&type=script&lang=js&\"\nexport * from \"./heat-map.vue?vue&type=script&lang=js&\"\nimport style0 from \"./heat-map.vue?vue&type=style&index=0&id=294875f9&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"294875f9\",\n  null\n  \n)\n\ncomponent.options.__file = \"heat-map.vue\"\nexport default component.exports"],"sourceRoot":""}